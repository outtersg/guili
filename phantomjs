#!/bin/sh
# Copyright (c) 2006 Guillaume Outters
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e

absolutiseScripts() { SCRIPTS="$1" ; echo "$SCRIPTS" | grep -q ^/ || SCRIPTS="`dirname "$2"`/$SCRIPTS" ; } ; absolutiseScripts "`command -v "$0"`" "`pwd`/." ; while [ -h "$SCRIPTS" ] ; do absolutiseScripts "`readlink "$SCRIPTS"`" "$SCRIPTS" ; done ; SCRIPTS="`dirname "$SCRIPTS"`"
. "$SCRIPTS/util.sh"

logiciel=phantomjs

# Historique des versions gérées

v 1.9.2 && prerequis="freetype fontconfig libpng libjpeg icu 55.1 openssl < 1.1" && modifs="miens compatibleJpegMien asiatiques noproxy debogageEtProxy freetype2 lz defineEspace" || true
v 1.9.7 || true
v 1.9.8 || true
v 2.0.0 && prerequis="flex bison ruby $prerequis" && modifs="miensSqlite compatibleJpegMien debogageEtProxy defineEspace" && qb="/qtbase" || true
v 2.0.0 && prerequis="harfbuzz $prerequis" && modifs="miensSqlite compatibleJpegMien debogageEtProxy qmakeO3 qtclang defineEspace" && qb="/qtbase" || true
v 2.1.1 && prerequis="gperf python < 3 $prerequis" && modifs="dyn viaGit miens pipe2 statfs procinfo icuSansDl compatibleJpegMien debogageEtProxy lz qmakeO3 qtclang qpa defineEspace" || true

#echo "NOTE: en 1.9.8, sur certains systèmes, PhantomJS a du mal à comprendre qu'il doit compiler les modules qu'il embarque. Il faudra donc peut-être que vous le fassiez à la main, à savoir: remplacer le obtenirEtAller suivi des modifs par un bash, de là faire en manuel un make, constater que ça plante, aller dans le répertoire WebKit/qt, faire un make, aller dans qt/gui, faire un make, et revenir faire le make principal. N'était-ce pas à cause du manque de bison et ruby?" >&2
#echo "NOTE: en 2, Qt5 essaye de compiler des fichiers *AllInOne.cpp, ce qui plante sur les machines moins bien dotées. On peut tout d'abord essayer de relancer l'installation (en effet le make compile en parallèle; quand deux AllInOne.cpp se compilent en même temps, l'un plante, libérant la mémoire, et make, passant en \"Waiting for other tasks to complete\", va permettre à l'autre de se terminer. Finalement, un par un, on parvient à nos fins). Sinon on peut essayer de procéder manuellement, en récupérant la commande de compil, et en l'exécutant à la main par étapes: remplacer le -c par d'abord -E, puis -S, puis l'assemblage du .s en -c. N.B.: seul le répertoire et le nom change entre les différents AllInOne, les options de compil sont les mêmes. On peut donc faire un lanceur réutilisable pour tous). Pour le plus gros (Inspector, semble-t-il), on monte à 1 Go de SIZE" >&2

# Modifications

# De quoi ajouter un filtrage, invoqué dans le build.py, avant une étape à préciser.
g_numFiltreAvant=0
filtreAvant()
{
	g_numFiltreAvant="`expr 1 + $g_numFiltreAvant`"
	local fa="$TMP/$$/filtreAvant.$g_numFiltreAvant"
	cat > "$TMP/$$/filtreAvant.$g_numFiltreAvant" <<TERMINE
#!/bin/sh
export SCRIPTS="$SCRIPTS"
. "$SCRIPTS/util.sh"
# Pour éviter un ménage un peu expéditif, on surcharge l'util_menage appelée par la sortie des scripts util.sh:
TERMINE
	sed -e '/^util_menage(/,/^}/!d' -e 's/\$dossierCourant/zogouzogou/g' < "$SCRIPTS/util.sh" >> "$fa"
	cat >> "$TMP/$$/filtreAvant.$g_numFiltreAvant"
	exprAvantSh="$1"
	exprAvantPy="$1"
	if [ "x$exprAvantSh" = x-sh ]
	then
		exprAvantSh="$2"
		exprAvantPy="$3"
	fi
	chmod a+x "$TMP/$$/filtreAvant.$g_numFiltreAvant"
	if [ -e build.py ]
	then
		filtrer build.py sed -e "/$exprAvantPy/"'{
h
s#[^ 	].*#os.system("'"$TMP/$$/filtreAvant.$g_numFiltreAvant"'")#
p
x
}'
	else
		filtrer build.sh sed -e "/$exprAvantSh/"'i\
'"$TMP/$$/filtreAvant.$g_numFiltreAvant"'
'
	fi
}

dyn()
{
	# Sur certains OS / compilo, "QtWebKit cannot be built as a static library on this platform. Check your configuration in qtbase/config.summary."
	# À FAIRE: libdata/pkgconfig sur FreeBSD?
	true || filtreAvant 'self.make("\.")' <<TERMINE
filtrer "`pwd`/src/qt/qtbase/lib/pkgconfig/Qt5WebKitWidgets.pc" sed -e 's/-lQt5WebKitWidgets/-lQt5WebKitWidgets -lQt5PrintSupport/'
TERMINE
	# En mode dynamique, petit souci: Qt compile bien son QtWebCore en dynamique, mais WebCore en statique, avec un -fvisibility=hidden, avant d'inclure celle-ci dans QtWebCore. Du coup quand PhantomJS demande QtWebCore, elle se heurte à des "symboles indéfinis", en fait planqués dans la section texte *locale* du .so.
	filtreAvant 'qtbase.configure' <<TERMINE
filtrer "`pwd`/src/qt/qtbase/configure" grep -v reduce_exports
TERMINE
	# De plus les biblios n'étant plus embarquées façon poupées russes les unes dans les autres, il nous faut les spécifier à la main.
	echo "LIBS += -lQt5PrintSupport" >> src/phantomjs.pro
	case `uname -s`-`uname -r` in
		FreeBSD-10.*)
			filtrer build.py grep -v '"-static"'
			;;
	esac
}

qtclang()
{
	if ! command -v gcc 2> /dev/null >&1
	then
		filtrer src/qt/qtbase/configure sed -e 's#freebsd-g++#unsupported/freebsd-clang#'
	fi
}

sansQpa()
{
	# La 2.1.1 se propose de nous brancher sur une QPA inexistante ("phantom"). Attendons sagement qu'elle soit créée dans une prochaine version, pour l'heure contentons-nous de ce qui se faisait avant avec le build.sh (à savoir ne pas donner de -qpa au configure de Qt, et le laisser choisir).
	#filtrer build.py grep -ve -qpa
	filtrer build.py sed -e '/-qpa/{
h
s#[^ 	].*#"-no-qpa-platform-guard",#
p
x
s/phantom/offscreen/g
}'
}

qpa()
{
	# La 2.1.1 avec un Qt trop récent ne sait pas définir l'option qu'il faut pour dire à Qt d'être étêté.
	# Correction trouvée sur:
	# https://github.com/ariya/phantomjs/pull/14505/files
	filtrer build.py sed -e '/-qpa/{
h
s#[^ 	].*#"-no-qpa-platform-guard",#
p
x
}'
}

qmakeO3()
{
	# qmake se vautre en recevant une option -O3. On rajoute la gestion du cas.
	filtreAvant -sh 'cd.*preconfig.sh' self.configureQtBase <<TERMINE
filtrer "`pwd`/src/qt/qtbase/config.tests/unix/compile.test" sed -e '/ \\*)/i\\
-O*) CFLAGS="\\\$CFLAGS \\\$PARAM" ; CXXFLAGS="\\\$CXXFLAGS \\\$PARAM" ;;
'
filtrer "`pwd`/src/qt/qtbase/configure" sed -e '/-L.*\\*.*)/i\\
-O*) QMakeVar add QMAKE_CFLAGS -O3 ; QMakeVar add QMAKE_CXXFLAGS -O3 ;;
'
TERMINE
}

icuSansDl()
{
	# Bizarre, la première fois ça passe bien, mais quand on relance une compile, le -ldl suivant fait péter.
	filtrer src/qt/qtbase/src/3rdparty/icu_dependency.pri sed -e 's/-ldl//g'
}

procinfo()
{
	( cd src/qt/qtbase && git checkout src/corelib/io/qlockfile_unix.cpp )
	# En fonction du Qt récupéré par le script de composition, il va nous falloir ou non détecter correctement notre FreeBSD.
	filtrer src/qt/qtbase/src/corelib/io/qlockfile_unix.cpp sed -e 's@defined(__GLIBC__) && defined(__FreeBSD_kernel__)@HAVE_NO_GETPROC@'
	(
	patch -p0 <<TERMINE
--- src/qt/qtbase/src/corelib/io/qlockfile_unix.cpp	2016-02-04 15:29:11.000000000 +0100
+++ src/qt/qtbase/src/corelib/io/qlockfile_unix.cpp	2016-02-04 16:20:19.000000000 +0100
@@ -56,6 +56,13 @@
 #   include <cstdio>
 #elif defined(Q_OS_BSD4) && !defined(Q_OS_IOS)
 #   include <sys/user.h>
+# if defined(__GLIBC__) && defined(__FreeBSD_kernel__)
+#  define HAVE_NO_GETPROC 1
+# elif defined(__FreeBSD__) && __FreeBSD__ < 9
+#  define HAVE_NO_GETPROC 1
+# else
+#  define HAVE_NO_GETPROC 0
+# endif
 # if HAVE_NO_GETPROC
 #   include <sys/cdefs.h>
 #   include <sys/param.h>
TERMINE
	) || true
}

statfs()
{
    # Linux a changé la signification de bsize (Block Size) en "Optimal transfer block size", et ajouter ("since Linux 2.6") un f_frsize censé être le nouveau bsize. Mais bon on n'a pas ça côté FreeBSD (8), donc basta. On espère que sous Linux le changement ne changera rien (que la valeur est la même).
    filtrer src/qt/qtbase/src/corelib/io/qstorageinfo_unix.cpp sed -e 's/f_frsize/f_bsize/g'
}

pipe2()
{
	( cd src/qt/qtbase && git checkout src/3rdparty/forkfd/forkfd.c )
	# En fonction du Qt récupéré par le script de composition, il va nous falloir ou non détecter correctement notre FreeBSD.
	(
    patch -p0 <<TERMINE
--- src/qt/qtbase/src/3rdparty/forkfd/forkfd.c	2016-02-03 17:24:01.000000000 +0100
+++ src/qt/qtbase/src/3rdparty/forkfd/forkfd.c	2016-02-03 17:24:19.000000000 +0100
@@ -59,7 +59,7 @@
 #  define HAVE_WAITID   1
 #endif
 
-#if defined(__FreeBSD__)
+#if defined(__FreeBSD__) && __FreeBSD__ >= 10
 #  define HAVE_PIPE2    1
 #endif
 
TERMINE
	) || true
}

viaGit()
{
	# La commande suivante ne marche que sur un git clone.
	#git submodule update --init
	#return
	# En mode manuel (archive .zip), on doit spécifier les révisions exactes. Le plus simple pour cela est d'aller voir le commit correspondant sur un phantomjs issu d'un clonage, après y avoir fait le bout de code ci-dessus.
	case $version in
		2.1.1)
			bqtbase=b5cc0083a5766e773885e8dd624c51a967c17de0
			bqtwebkit=e7b74331d695bfa8b77e39cdc50fc2d84a49a22a
			;;
	esac
    [ -d src/qt/qtbase/.git ] || git clone -b phantomjs https://github.com/Vitallium/qtbase.git src/qt/qtbase
	[ -z "$bqtbase" ] || ( cd src/qt/qtbase && git checkout $bqtbase )
    [ -d src/qt/qtwebkit/.git ] || git clone -b phantomjs https://github.com/Vitallium/qtwebkit.git src/qt/qtwebkit
	[ -z "$bqtwebkit" ] || ( cd src/qt/qtwebkit && git checkout $bqtwebkit )
}

freetype2()
{
	CPPFLAGS="`echo "$CPPFLAGS" | sed -e 's#\(-I[^ ]*freetype[^ ]*\)#\1/freetype2#g'` -I$INSTALLS/include/freetype2"
	export CPPFLAGS
}

miens()
{
	# Si on le laisse compiler avec ses versions jpeg embarquées, cet abruti utilise en priorité les .cpp locaux mais les .h d'/usr/local. D'où incohérences sur les tailles de struct, et Bus error dans l'exécutable résultant.
    pge $version 2 && OPTIONS_CONF="$OPTIONS_CONF --qt-config=-system-libjpeg --qt-config=-system-libpng --qt-config=-system-zlib" || true
	filtrer src/qt/preconfig.sh sed -E -e '/-qt-(libjpeg|libpng|zlib)/s/^/#/'
	rm -Rf src/qt$qb/src/3rdparty/zlib* src/qt$qb/src/3rdparty/lib* # Pour ne pas être tenté.
}

miensSqlite()
{
    OPTIONS_CONF="$OPTIONS_CONF --qtdeps=system"
	filtrer src/qt/preconfig.sh sed -E -e '/-qt-(sql-sqlite)/s/^/#/'
	rm -Rf src/qt$qb/src/3rdparty/sqlite* # Pour ne pas être tenté.
}

compatibleJpegMien()
{
	# libjpeg se sert de TRUE et FALSE comme de clés d'un enum; qt définit TRUE et FALSE à true et false. Et un booléen comme clé d'enum, ça ne marche pas.
	# D'autre part on ne peut dire à libjpeg d'utiliser un simple bool (avec HAVE_BOOLEAN), car alors la taille de la structure jpeg_decompress_info change, et le bzero interne à libjpeg écrabouille plus d'octets qu'il ne devrait (ceci dit, depuis la version 9, libjpeg inclut un mécanisme qui nous permet de nous rendre compte de l'erreur assez rapidement, ouf).
	[ ! -e src/qt/qtbase/.git ] || ( cd src/qt/qtbase && git checkout src/gui/image/qjpeghandler.cpp )
	patch -p0 <<TERMINE
--- src/qt$qb/src/gui/image/qjpeghandler.cpp	2013-09-05 23:36:02.000000000 +0200
+++ src/qt$qb/src/gui/image/qjpeghandler.cpp	2013-09-23 17:57:26.000000000 +0200
@@ -68,7 +68,11 @@
 #if defined(Q_OS_UNIXWARE)
 #  define HAVE_BOOLEAN  // libjpeg under Unixware seems to need this
 #endif
+#undef TRUE
+#undef FALSE
 #include <jpeglib.h>
+#define B_TRUE TRUE
+#define B_FALSE FALSE
 #ifdef const
 #  undef const          // remove crazy C hackery in jconfig.h
 #endif
TERMINE
    filtrer src/qt$qb/src/gui/image/qjpeghandler.cpp sed -e 's/defined(Q_OS_UNIXWARE)/1/' -e '/(.*TRUE/s/TRUE/B_TRUE/g' -e 's/B_B_/B_/g'
    filtrer src/qt$qb/src/gui/image/qjpeghandler.cpp grep -v 'define HAVE_BOOLEAN'
    filtrer src/qt$qb/src/gui/image/qjpeghandler.cpp sed \
        -e '/cinfo/s/true/TRUE/g'

    if [ -e "src/qt/qtwebkit/Source/WebCore/platform/image-decoders/jpeg/JPEGImageDecoder.h" ]
    then
        filtrer src/qt/qtwebkit/Source/WebCore/platform/image-decoders/jpeg/JPEGImageDecoder.h sed -e '/include .*jpeglib.h/{
i\
#undef TRUE
i\
#undef FALSE
}'
        filtrer src/qt/qtwebkit/Source/WebCore/platform/image-decoders/jpeg/JPEGImageDecoder.cpp sed \
            -e '/jpeg_/s/true/TRUE/g' \
            -e '/m_info/s/true/TRUE/g' \
            -e '/m_info/s/false/FALSE/g' \
            -e '/boolean fill_input_buffer/,/^}/s/false/FALSE/g' \
            -e 's/m_info.do_fancy_upsampling = doFancyUpsampling();/m_info.do_fancy_upsampling = doFancyUpsampling() ? TRUE : FALSE;/'
    fi
}

asiatiques()
{
	# Qt se compile avec un appel dans ses destructeurs aux instances d'encodages chinois, coréen, japonais et thaïlandais, mais n'inclut pas les bibliothèques qui les définissent. On les ajoute donc à notre PhantomJS directement.
	cat >> src/phantomjs.pro <<TERMINE
LIBS += -L../src/qt/plugins/codecs -lqcncodecs -lqjpcodecs -lqkrcodecs -lqtwcodecs
TERMINE
}

noproxy()
{
	remplacant=`obtenir 'https://qt.gitorious.org/qt/qtbase/raw/175c69108a5b3c81d32b775f01d1e811289c89c6:src/network/kernel/qnetworkproxy_generic.cpp'`
	cat "$remplacant" > src/qt/src/network/kernel/qnetworkproxy_generic.cpp
}

debogageEtProxy()
{
    # https://github.com/ariya/phantomjs/pull/12810
	for i in src/3rdparty/webkit qtwebkit
	do
		f="src/qt/$i/Source/WebKit/qt/WebCoreSupport/InspectorServerQt.cpp"
		if [ -e "$f" ]
		then
			filtrer "$f" sed -e '/m_tcpServer = new QTcpServer/a\
    m_tcpServer->setProxy(QNetworkProxy::NoProxy);
' -e '/namespace/i\
#include <qnetworkproxy.h>
'
		fi
	done
}

lz()
{
	# Sur mon FreeBSD, la libz est compilée en biblio partagée, à lier.
	LDFLAGS="$LDFLAGS -lz"
	export LDFLAGS
}

defineEspace()
{
	# Les préprocesseurs des compilos modernes (C++11) ne veulent plus faire de la concaténation "chaîne"CONSTANTE, il faut un espace entre les deux.
	filtrer src/webpage.cpp sed -e 's/"CALLBACKS_OBJECT_NAME"/" CALLBACKS_OBJECT_NAME "/g'
}

# Variables

archive="https://phantomjs.googlecode.com/files/phantomjs-$version-source.zip"
archive="https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-$version-source.zip"
pge $version 2.1 && archive="https://github.com/ariya/phantomjs/archive/$version.zip" || true

destiner

prerequis

if false ; then
    cd /tmp/phantomjs-$version
    echo "Vas-y" >&2
    bash
    exit 0
fi
obtenirEtAllerDansVersion

echo Correction… >&2
for modif in true $modifs ; do $modif ; done

echo Configuration… >&2

echo Compilation… >&2
if pge $version 2.1
then
    echo y | ./build.py $OPTIONS_CONF `for option in $CPPFLAGS $CFLAGS $LDFLAGS ; do printf " --qt-config=$option" ; done`
else
echo y | ./build.sh $OPTIONS_CONF --qt-config "$CPPFLAGS $CFLAGS $LDFLAGS" # Lorsque $INSTALLS vaut /usr/local, build.sh (et son qmake) arrive à détecter les OpenSSL et autres qui y évoluent. Par contre si on a tout compilé en local local ($HOME/local), le --qt-config est nécessaire. On lui passe tout en vrac, lui fera le ménage pour trier les -L, -I, etc.
fi
# On tente de construire plusieurs fois: si la première construction pète (généralement faute de mémoire sur les AllInOne), peut-être l'occurrence suivante ordonnera-t-elle ses fichiers suffisamment différemment (du genre dans un make -j4) pour que le machin qui ne passait pas ait sa chance et soit cette fois compilé, permettant d'avancer.
make || make || make || make || make

echo Installation… >&2
mkdir -p dest/libexec/phantomjs dest/bin
cp bin/phantomjs dest/libexec/phantomjs/
# Si PhantomJS s'est compilé en mode biblios partagées, il nous faut intégrer les biblios au livrable.
if find src/qt/qtbase/lib/ -name "libQt*.so*" | grep -q .
then
( cd src/qt/qtbase/lib/ && find . -name "libQt*.so*" -print0 | xargs -0 tar cf - ) | ( cd dest/libexec/phantomjs/ && tar xf - )
fi
# À FAIRE: les polices (QT_QWS_FONTDIR, src/qt/qtbase/lib/fonts/).
( cd src/qt/qtbase/ && tar cf - plugins ) | ( cd dest/libexec/phantomjs && tar xf - )
cat > "dest/bin/phantomjs" <<TERMINE
#!/bin/sh
SCRIPTS="\`command -v "\$0"\`" ; [ -x "\$SCRIPTS" -o ! -x "\$0" ] || SCRIPTS="\$0" ; case "\`basename "\$SCRIPTS"\`" in *.*) true ;; *sh) SCRIPTS="\$1" ;; esac ; case "\$SCRIPTS" in /*) ;; *) SCRIPTS="\`pwd\`/\$SCRIPTS" ;; esac ; delie() { while [ -h "\$SCRIPTS" ] ; do SCRIPTS2="\`readlink "\$SCRIPTS"\`" ; case "\$SCRIPTS2" in /*) SCRIPTS="\$SCRIPTS2" ;; *) SCRIPTS="\`dirname "\$SCRIPTS"\`/\$SCRIPTS2" ;; esac ; done ; } ; delie ; SCRIPTS="\`dirname "\$SCRIPTS"\`" ; delie
LD_LIBRARY_PATH="\$SCRIPTS/../libexec/phantomjs:\$LD_LIBRARY_PATH"
export QT_PLUGIN_PATH="\$SCRIPTS/../libexec/phantomjs/plugins"
"\$SCRIPTS/../libexec/phantomjs/phantomjs" "\$@"
TERMINE
chmod a+x "dest/bin/phantomjs"
sudo rm -Rf "$dest"
sudo cp -R dest "$dest"

sutiliser

rm -Rf "$TMP/$$"
