#!/bin/sh
# Copyright (c) 2004 Guillaume Outters
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e

Delirant() { local s2 ; while [ -h "$s" ] ; do s2="`readlink "$s"`" ; case "$s2" in [^/]*) s2="`dirname "$s"`/$s2" ;; esac ; s="$s2" ; done ; } ; SCRIPTS() { local s="`command -v "$0"`" ; [ -x "$s" -o ! -x "$0" ] || s="$0" ; case "$s" in */bin/*sh) case "`basename "$s"`" in *.*) true ;; *sh) s="$1" ;; esac ;; esac ; case "$s" in [^/]*) local d="`dirname "$s"`" ; s="`cd "$d" ; pwd`/`basename "$s"`" ;; esac ; Delirant ; s="`dirname "$s"`" ; Delirant ; SCRIPTS="$s" ; } ; SCRIPTS
. "$SCRIPTS/util.sh"

# Versions par défaut (utilisée si on est appelé avec un +module sans version de précisée).
# Si pour un module il n'existe ni version précisée ni version par défaut, le master sera pris.
# Une version par défaut sous la forme ">= x" ou "< y" ira chercher, parmi toutes celles officielles, la plus récente qui réponde aux critères.
v_cscript=">= 0"

v 1.9.1 && modifs="" && prerequis="pcre < 10 openssl zlib" || true
v 1.10.1 || true
v 1.11.5 || true
v 1.12.2 || true
v 1.15.8 || true
v 1.15.12 || true
v 1.17.1 || true
v 1.17.4 || true
v 1.17.10 || true
v 1.19.6 || true
v 1.19.10 || true
v 1.21.5 && remplacerPrerequis "pcre >= 10" || true
v 1.29.1 || true

archive="http://nginx.org/download/nginx-$version.tar.gz"

# N.B.: relinc pourra sauter, cscript ayant vocation à prendre sa place. Cependant on le garde tant que tournent des nginx reposant sur relinc.
relinc()
{
	local suff=
	case "+$argOptions+" in
		*+cscript*) suff="-defs"
	esac
	patch -p1 < "$SCRIPTS/nginx.relinc$suff.patch"
}

# Variables

moduleNginxSiOption()
{
	local o="$1"
	local ov="$o"
	local s="$2"
	local d spropre
	case "$argOptions" in
		*+${o}_[v][0-9]*|*+${o}_[0-9]*) ov="`echo "$argOptions" | sed -e 's/.*+\('"$o"'_v*[0-9]\)/\1/' -e 's/[-+].*//'`" ;;
	esac
	if option "$o" || option "$ov"
	then
		# Pour les http, existe-t-il une version locale?
		case "$s" in
			http*://*) # Module externe
				_moduleLocalOuVersion # Transforme $s et $o pour aller chercher éventuellement un source local, et la version donnée.
				;;
		esac
		case "$s" in
			http*://*) # Module externe
				local suffixe="`echo "$s" | sed -e 's#.*/[^.]*##' -e 's#.*\.[^.][^.][^.][^.][^.]*##'`"
				local nomArchive="`basename "$s"`"
				if echo "$nomArchive" | egrep -vqe '(^|-)[0-9]+\.[0-9]+(\.[0-9]+)*(\.[a-z][a-z0-9]*)+$' # Si le nom de l'archive ne porte pas de numéro de version (ex.: git), on lui en donne un daté.
				then
					nomArchive="nginx_module_$o.`date +%Y%m%d`$suffixe"
				fi
				d="$TMP/$$/modules.$o"
				MODULES_EXTERNES="$MODULES_EXTERNES$nomArchive|$s|$d|"
				OPTIONS_CONF="$OPTIONS_CONF --add-module=$d"
				;;
			*"()")
				spropre="`echo "$s" | tr -d ')('`"
				d="$TMP/$$/$spropre"
				mkdir "$d"
				(
					echo '#!/bin/sh'
					echo 'set -e'
					echo 'SCRIPTS="'"$SCRIPTS"'"'
					echo 'modifs="'"$modifs"'"'
					echo 'argOptions="'"$argOptions"'"'
					sed -e '/^[_a-zA-Z0-9]*()$/,/^}/!d' < "$install_moi"
					echo "$spropre"
				) > "$d/config"
				chmod a+x "$d/config"
				OPTIONS_CONF="$OPTIONS_CONF --add-module=$d"
				;;
			*/*) # Module local hors nginx.
				OPTIONS_CONF="$OPTIONS_CONF --add-module=$s"
				;;
			*) # Module interne
				OPTIONS_CONF="$OPTIONS_CONF --with-$s"
				;;
		esac
	fi
}

obtenirModulesExternes()
{
	IFS='|'
	tifs _obtenirModulesExternes $MODULES_EXTERNES
}

_obtenirModulesExternes()
{
	local d
	while [ $# -gt 0 ]
	do
		d="`obtenirEtAllerDans "$2" "$1" ; pwd`"
		[ -n "$d" -a -d "$d" ] || return 1
		case "$3" in
			"$TMP/$$"/*) rm -Rf "$3" ;;
		esac
		mv "$d" "$3"
		shift
		shift
		shift
	done
}

_moduleLocalOuVersion()
{
	case "$s" in
		http*://*/master.zip) true ;;
		*) return 0 ;;
	esac
	local v_module v_optionModule nom d
	nom="`dirname "$s"`"
	while true
	do
		case "$nom" in
			*/archive) true ;;
			*) break ;;
		esac
		nom="`dirname "$nom"`"
	done
	nom="`basename "$nom"`"
	# S'il existe une version par défaut pour ce module…
	eval "v_module=\"\$v_$o\""
	# … ou, plus important, si nous est demandée explicitement une version, on définit v_module.
	case "$argOptions" in
		+${o}_[v0-9]*) v_module="`echo "$argOptions" | sed -e "s/.*[+]${o}_//" -e 's/[-+].*//' -e 's/_/./g'`" ;;
	esac
	d="$SCRIPTS/../projets/$nom"
	# Si on ne demande aucune version en particulier, et qu'il existe une extraction locale du source, on prend.
	if [ -z "$v_module" -a -d "$d" ]
	then
		s="$d"
		return 0
	fi
	# Sinon, on va triturer l'URL de l'archive pour aller chercher la version demandée.
	if v_module "$s"
	then
		s="`echo "$s" | sed -e "s#master#$v_module#"`"
		# Et l'option effective sera suffixée de la version.
		v_optionModule="`echo "$v_module" | tr . _`"
		argOptions="`options "$argOptions-$o+${o}_$v_optionModule"`"
	fi
}

v_module()
{
	local sources="$1"
	case "$v_module" in
		"") return 1 ;;
		*[\<\>=]*)
			v_module="`derniereVersionModule "$sources" "$v_module"`"
			[ -n "$v_module" ] || return 1
			;;
	esac
}

derniereVersionModule()
{
	local url="$1" ua
	shift
	local v="$*"
	
	case "$url" in
		https://github.com/*/archive/master.zip)
			ua="`echo "$url" | sed -e 's#://github.com#://api.github.com/repos#' -e 's#/archive/master.zip#/tags#'`"
			telech "$ua" | sed -e  '/"name"/!d' -e 's/.*: *"/v-/' -e 's/".*//' | filtrerVersions "$v" | triversions | cut -c 3- | tail -1 # v- en préfixe, car filtrerVersions a besoin d'un nom de logiciel fictif avant la version.
			;;
	esac
}

OPTIONS_CONF=
MODULES_EXTERNES=

moduleNginxSiOption realip http_realip_module
moduleNginxSiOption geoip http_geoip_module
moduleNginxSiOption dav http_dav_module
moduleNginxSiOption dav https://github.com/arut/nginx-dav-ext-module/archive/master.zip
moduleNginxSiOption upstreamcheck https://github.com/yaoweibin/nginx_upstream_check_module/archive/master.zip
moduleNginxSiOption headersmore https://github.com/openresty/headers-more-nginx-module/archive/master.zip
moduleNginxSiOption cscript https://github.com/outtersg/ngx_conf_defs/archive/master.zip
moduleNginxSiOption twinswelcome https://github.com/outtersg/ngx_twins_welcome/archive/master.zip
moduleNginxSiOption relinc 'relinc()'

if option geoip ; then prerequis="$prerequis geoip" ; fi
if option dav ; then prerequis="$prerequis libxml libxslt" ; modifs="$modifs proppatch"; fi

proppatch()
{
	# https://github.com/arut/nginx-dav-ext-module/issues/52
	# Mais il faut aussi réimplémenter a minima le PROPPATCH sous nginx, façon:
	# http://netlab.dhis.org/wiki/ru:software:nginx:webdav
	local rustine="`obtenir https://github.com/arut/nginx-dav-ext-module/files/3835180/proppatch.patch.gz`"
	gunzip < "$rustine" | ( cd "$TMP/$$/modules.dav" && patch -p5 )
}

# Boulot

destiner

prerequis
if option dav ; then export CPPFLAGS="-I$destlibxml/include/libxml2 $CPPFLAGS" ; fi

echo Obtention et décompression… >&2
obtenirEtAllerDansVersion

obtenirModulesExternes

echo Correction… >&2
for modif in true $modifs ; do $modif "$@" ; done

echo Configuration… >&2
for p in "$@" ; do case "$p" in --with-debug) OPTIONS_CONF="$OPTIONS_CONF $p" ;; esac ; done
./configure --prefix="$dest" --with-http_ssl_module --with-cc-opt="$CPPFLAGS $CFLAGS" --with-ld-opt="$LDFLAGS" $OPTIONS_CONF

echo Compilation… >&2
make
moire "$@" --with-debug
[ $MOIRE_STATUT = fils ] || sudoku mv -f "$dest/sbin/nginx" "$dest/sbin/nginx-debug"

echo Installation… >&2
sudo make install

sutiliser
