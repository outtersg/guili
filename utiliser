#!/bin/sh

prefixe=/usr/local

Delirant() { local s2 ; while [ -h "$s" ] ; do s2="`readlink "$s"`" ; case "$s2" in [^/]*) s2="`dirname "$s"`/$s2" ;; esac ; s="$s2" ; done ; } ; SCRIPTS() { local s="`command -v "$0"`" ; [ -x "$s" -o ! -x "$0" ] || s="$0" ; case "$s" in */bin/*sh) case "`basename "$s"`" in *.*) true ;; *sh) s="$1" ;; esac ;; esac ; case "$s" in [^/]*) local d="`dirname "$s"`" ; s="`cd "$d" ; pwd`/`basename "$s"`" ;; esac ; Delirant ; s="`dirname "$s"`" ; Delirant ; SCRIPTS="$s" ; } ; SCRIPTS
[ ! -f "$SCRIPTS/util.local.sh" ] || . "$SCRIPTS/util.local.sh"
[ -z "$INSTALLS" ] || prefixe="$INSTALLS"

[ -z "$PREFIXE_UTILISER" ] || prefixe="$PREFIXE_UTILISER"
[ "x$1" = "x-r" ] && shift && prefixe="$1" && shift

menage()
{
	find bin include lib libexec man share -type l | while read f ; do readlink "$f" | grep -q "$1" && rm -f "$f" ; done
	find bin include lib libexec man share -type d | while read d ; do [ `ls "$d" | wc -l` -eq 0 ] && echo "$d" && rm -Rf "$d" ; done # Plusieurs fois, car un dossier supprimé peut rendre vide son parent.
}

command -v proff > /dev/null 2>&1 || proff() { cat ; }
auSecours()
{
	if [ -n "$1" ]
	then
	cat >&2 <<TERMINE
# "$1" introuvable.
TERMINE
	fi
	proff >&2 <<TERMINE
# Utiliser
# Crée récursivement des liens de $prefixe/<x>/<y> vers $prefixe/<cible>/<x>/<y>
# © Guillaume Outters 2003-2004,2007,2019-2020

Utilisation: $0 [-d] [-r <racine>] [-p <préservés>] [--videur <videur>] <cible>
  -d
    Ménage (car "le d ménage"): supprime les références au logiciel.
  -r <racine>
    Va chercher sous <racine> plutôt qu'/usr/local.
    Voir aussi la possibilité de préciser la racine dans <cible>.
  -p <préservés>
    <préservés> est une liste de noms de dossier dont préserver les liens.
    Ainsi \`utiliser -p "logiciel-2.0 logiciel-3.0" logiciel-1.0\` n'écrasera-t-il pas <racine>/bin/logiciel par ../logiciel-1.0/bin/logiciel si c'est un lien symbolique vers ../logiciel-2.0/bin/logiciel.
  --videur <videur>
    Shell appelé pour trancher si l'on peut remplacer des liens symboliques hors de notre champ habituel de travail (ne référençant pas une autre version du même <logiciel>).
    Le <videur> est invoqué avec pour paramètres <logiciel> <autre racine> (ex.: \`libjpegturbo-2.0.2 libjpeg-8.4\` si se pose la question de remplacer lib/libjpeg.so -> ../libjpeg-8.4/lib/libjpeg.so par -> ../libjpegturbo-2.0.2/lib/libjpeg.so).
    Il doit renvoyer précisément 42 pour valider l'écrasement (ce qui permet de distinguer à la fois des erreurs classiques type 127 pour commande introuvable, erreur de syntaxe, segmentation fault, et du 0 d'un script qui aurait oublié de valider explicitement).
    Il lui est possible aussi d'accéder aux variables \$rc (radical candidat) et \$rp (radical présent), auquel cas il lui faut terminer par un # pour éviter que les \$rc et \$rp lui soient passés en paramètres. On peut ainsi préciser:
      --videur 'case "\$rp" in a-1.0.0) exit 42 ;; esac #'
    qui autorisera l'écrasement du seul a-1.0.0
    Les résultats du videur sont cachés, de manière à n'invoquer qu'une fois le videur par radical trouvé.
  <cible>
    Cible des liens symboliques, sous la forme <logiciel>(+<option>)*-<version>.
    En cas de chemin complet, son dirname est pris comme racine.

En cas de conflit sur un emplacement (quelque chose existe là où l'on voudrait créer notre lien), l'existant est préservé (on ne s'installe pas), sauf si:
- il s'agit d'un lien symbolique vers un dossier
  Auquel cas il devient un vrai dossier et on travaille les liens symboliques un niveau en-dessous (si bin est un lien symbolique vers sudo-1.x.y/bin alors qu'on a besoin de lier vers notre openssl-1.z/bin, alors bin est transformé en dossier, et des liens symboliques y sont créés bin/sudo -> ../sudo-1.x.y/bin/sudo et bin/openssl -> ../openssl-1.z/bin/openssl)
- c'est un lien symbolique vers une autre version du même logiciel (ET cette autre version ne fait pas partie des préservés)
  Ainsi ../openssl-1.0.x/bin/openssl remplacera-t-il ../openssl-0.9.y/bin/openssl, sauf si on a été appelés avec un -p openssl-0.9.y
- le <videur> a permis la suppression de l'élément.
TERMINE
	exit 1
}

allerUtiliser()
{
	local i
	local j
	local k
	# Juste le nom de l'app.
	i="`echo "$1" | sed -e 's#/.*##'`"
	cd "$prefixe/$i"
	# Le nom de tout ce qui est après l'app (avec le / reporté à la fin).
	k="`echo "$1" | sed -e 's#^[^/]*##' -e 's#$#/#' -e 's#^/##'`"
	# Les .. correspondant à tout ce qui est après l'app.
	j="`echo "$1" | sed -e 's#^[^/]*##' -e 's#/[^/]*#..@#g' -e 's#@#/#g'`"
	utiliserEtoile "$j$i" "$k"
}

# dirname en pur shell.
# Sur mon FreeBSD 11.2 sous VirtualBox avec un SSD, pour 1000 dirname ou dn ../../openssl/lib/openssl/libssl.so:
# - dirname: 6,80 s
# - dn:      0,16 s
dn()
{
	IFS=/
	_dn $1
}

_dn()
{
	unset IFS
	case $# in
		0) echo / ; return ;;
		1) if [ -z "$1" ] ; then echo / ; else echo . ; fi ; return ;;
	esac
	local r=
	while [ $# -gt 2 ] ; do r="$r$1/" ; shift ; done
	r="$r$1"
	[ -n "$r" ] || r=/
	echo "$r"
}

# Chope le radical d'installation d'un chemin (sans ses options ni version).
# Le résultat se trouvera dans $radical.
# Ex.: ../../../apr-util-1.6.1 -> ../../../apr-util
radicaliser()
{
	IFS="-"
	_radicaliser $1
	IFS="+"
	_radicalPremier $radical
	unset IFS
}
_radicaliser()
{
	unset IFS # Pour certains Linux pourris, ( IFS=- ; case 0.20.1 in [0-9]*.[0-9]*) echo oui ;; esac ) n'affiche rien.
	local bout
	radical="$1" ; shift
	for bout in "$@"
	do
		case "$bout" in
			[0-9]*.[0-9]*) return 0 ;;
		esac
		radical="$radical-$bout" # Ex.: apr-util, l'util n'est pas un numéro de version comme dans apr-1.6.5.
	done
}
_radicalPremier()
{
	radical="$1"
}

statn()
{
	case `uname` in
		FreeBSD|Darwin) stat -f "%N" "$@" ;;
		*) stat --format="%N" "$@" ;;
	esac
}

utiliserEtoile()
{
	if statn "$2"* 2> /dev/null > /dev/null
	then
		utiliser "$1" "$2"*
	else
		utiliser "$1"
	fi
}

utiliser()
{
	local ou="$1"
	local a audessus
	shift
	local gentillesse info
	
	local radical
	radicaliser "$ou"
	
	until [ $# = 0 ]
	do
		gentillesse=1
		info=
		# On commence par virer les liens qu'une de nos précédentes versions
		# auraient placés, et pour les liens déjà utilisés par un autre
		# logiciel, on les remplace si possible par un dossier qu'on va se
		# partager.
		if [ -L "$prefixe/$1" ]
		then
			a="`readlink "$prefixe/$1"`" # Vers où ça pointe pour l'heure?
			calcGentillesse "$radical" "$ou" "$a"
			audessus="`dn "$1"`"
			if [ -z "$gentillesse" ]
			then
				rm "$prefixe/$1"
			elif [ -d "$prefixe/$audessus/$a" -a ! -L "$prefixe/$audessus/$a" ] # La destination est un répertoire, on peut l'utiliser.
			then
				rm "$prefixe/$1"
				mkdir "$prefixe/$1"
				a="`echo "$a" | sed -e 's#\.\./##g'`"
				echo "On ménage $a…" >&2
				( allerUtiliser "$a" )
			else
				info=" (déjà occupé par $a)"
			fi
		fi
		if [ -d "$1" -a -d "$prefixe/$1" -a ! -L "$prefixe/$1" ]
		then
			utiliserEtoile "../$ou" "$1/"
		elif [ \( ! -e "$prefixe/$1" \) ]
		then
			case "$faire" in 1)
			ln -s "$ou/$1" "$prefixe/$1"
			;; esac
		else
			[ $gentillesse -gt 1 ] || echo "Impossible d'écraser $1$info" >&2
		fi
		shift
	done
}

exprPreserves()
{
	echo "$*" | tr ' ' '\012' | grep -v ^$ | while read d ; do basename "$d" ; done | sed -e '{
s#$#/*#
p
s#^#*/#
}' | tr '\012' '|'
}

# Retrouve en parallèle le radical (premier élément de chemin différent de ..) de ses deux paramètres, les affectant à rc et rp.
# Le premier élément sert de référence: le radical du second doit se trouver au même niveau de ../ que celle du second, sans quoi rp sera vidé.
# Ex.:
#   `ridiculiser ../../xyz ../../abc/bin/plof` renverra rc=xyz rp=abc
#   `ridiculiser ../../xyz ../../../abc/bin/plof` renverra rc=xyz rp=
#   `ridiculiser ../../xyz ../abc/bin/plof` renverra rc=xyz rp=
# (ridiculiser car radicaliser était déjà prise, et vu que l'on réduit à la portion la plus ridicule qui soit, ça a du sens)
ridiculiser()
{
	local niveaux=
	IFS=/ ; _ridiculiserc $1
	IFS=/ ; _ridiculiserp $2
}

_ridiculiserc()
{
	unset IFS
	while [ "x$1" = x.. ]
	do
		shift
		niveaux="$niveaux ."
	done
	rc="$1"
}

_ridiculiserp()
{
	unset IFS
	local pouet
	rp=
	for pouet in $niveaux
	do
		[ "x$1" = x.. ] || return 0
		shift || return 0
	done
	[ "x$1" = x.. ] || rp="$1"
}

mechant()
{
	local r
	# Repérage du radical de chaque côté.
	ridiculiser "$1" "$2"
	# Si l'un est vide, on n'a pas de comparaison possible.
	[ -n "$rc" -a -n "$rp" ] || return 1
	# Si notre cache de résultats a déjà traité cette entrée, on l'exploite.
	if cacheVideur "$rp"
	then
		return $r
	fi
	# On valide (return 0) à moins que le videur ne sorte pas le mot de passe convenu.
	if ( appelerVideur ) || [ $? != 42 ]
	then
		defCacheDegommages + "$rp"
		return 1
	else
		defCacheDegommages - "$rp"
		return 0
	fi
}

defCacheDegommages()
{
	case "$1" in
		"")
			CACHE_PRESERVES=clougnouc
			CACHE_DEGOMMES=clougnouc
			;;
		"+") CACHE_PRESERVES="$CACHE_PRESERVES|$2" ;;
		"-") CACHE_DEGOMMES="$CACHE_DEGOMMES|$2" ;;
	esac
	
	eval \
	'
		cacheVideur()
		{
			case "$1" in
				'"$CACHE_PRESERVES"') r=1 ; return 0 ;;
				'"$CACHE_DEGOMMES"') r=0 ; return 0 ;;
			esac
			return 1
		}
	'
}

defCalcGentillesse()
{
	local preserves="$1" videur="$2"
	local exprPreserves="`exprPreserves "$preserves"`"
	local vi2r=
	[ -z "$videur" ] || vi2r='; mechant "$2" "$3" && gentillesse= || true'
	eval \
	'
		appelerVideur()
		{
			'"$videur"' "$rc" "$rp"
		}
		calcGentillesse()
		{
			local rc rp # radical du candidat, radical du présent
			case "$3" in
				'"$exprPreserves"'"") gentillesse=2 ;;
				$1[-][0-9]*.[0-9]*|$1+*) gentillesse= ;; # Même radical, version sans doute plus ancienne à ne pas préserver, on écrase.
				*) gentillesse=1 '"$vi2r"' ;;
			esac
		}
	'
	defCacheDegommages
}

analyserParametresEtTourner()
{
	local lv
	local preserves=
	local videur=
	local une=
	local faire=1
	while [ $# -gt 0 ]
do
		case "$1" in
			-h) auSecours ;;
			-d) faire=0 ; shift ; continue ;;
			-p) preserves="$preserves $2" ; shift ; shift ; continue ;;
			--videur) videur="$2" ; shift ; shift ; continue ;;
			*/*) prefixeIci="`dirname "$1"`" ; lv="`basename "$1"`" ;;
			*) prefixeIci="$prefixe" ; lv="$1" ;;
	esac
		defCalcGentillesse "$preserves" "$videur"
		[ -d "$prefixeIci/$lv" ] || auSecours "$prefixeIci/$lv"
	prefixe=$prefixeIci allerUtiliser "$lv"
		shift
		une=1
	done
	[ -n "$une" ] || auSecours
}

analyserParametresEtTourner "$@"
