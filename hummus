#!/bin/sh
# Copyright (c) 2005 Guillaume Outters
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e

absolutiseScripts() { SCRIPTS="$1" ; echo "$SCRIPTS" | grep -q ^/ || SCRIPTS="`dirname "$2"`/$SCRIPTS" ; }
calcScripts() { absolutiseScripts "`command -v "$1"`" "`pwd`/." ; while [ -h "$SCRIPTS" ] ; do absolutiseScripts "`readlink "$SCRIPTS"`" "$SCRIPTS" ; done ; SCRIPTS="`dirname "$SCRIPTS"`" ; }
calcScripts "$0"
. "$SCRIPTS/util.sh"

logiciel=hummus

v 3.0.0.99.1.c79134f39cb68dbcbb08648047d12f3324c3d2db.git && prerequis="libtiff 3.9.4 libjpeg 8.3 freetype zlib" && modifs="monMake" || true # Il faudrait un moyen pour que le numéro de version de libjpeg soit calculé depuis le libjpeg embarqué par le libtiff choisi.
v 3.2 || true
v 3.5 && prerequis_libjpeg="libjpegturbo" prerequis="libtiff < 4 $prerequis_libjpeg freetype zlib" && modifs="monMake monMakeOrdonne" || true
v 3.6 || true
v 3.9 && prerequis="$prerequis libpng libaesgm" || true
v 4.0 || true
# Pour construire avec cmake (/!\ pas de biblio dynamique), ajouter:
# && retirerModif monMake monMakeOrdonne && modifs="$modifs sonMake" && prerequis="cmake \\ $prerequis"

archive_git=http://github.com/galkahana/PDF-Writer.git
archive= # Putain de trucs hébergés chez box.com! Ces connards font de la rétention, c'est abominable (téléchargement via cinquante redirections avec du Javascript en POST sans aucune URL directe). En plus les fichiers individuels ne sont pas téléchargeables (401), il faut aller dans "Tous les downloads" depuis le site dév puis Télécharger (tout le répertoire).
archive="PDFWriter`echo "$version" | tr . _`.zip"
archive="https://github.com/galkahana/PDF-Writer/archive/$version.tar.gz" # Ouf, il est enfin passé chez Github!

v_simple="`echo "$version" | sed -e 's/[.][^.]*.git$//'`"
dest=$INSTALLS/$logiciel-$v_simple

sonMake()
{
	configurer()
	{
		mkdir -p Build
		cd Build
		cmake -DCMAKE_INSTALL_PREFIX:PATH=$dest -DUSE_BUNDLED=FALSE ..
	}
}

monMake()
{
	biblios="-ltiff -ljpeg -lfreetype -lz"
	case "$prerequis" in
		*libpng*) biblios="$biblios -lpng"
	esac
	case "$prerequis" in
		*libaesgm*) biblios="$biblios -laesgm"
	esac
	# Le système en cmake ne fait que de la biblio statique, et n'exploite pas nos biblios partagées.
	# À part libaesgm (développement propre à Hummus), il se lie aussi à zlib, libjpeg, libpng, libtiff, Freetype, dont il embarque les sources pour les compiler…
	cat > PDFWriter/Makefile <<TERMINE
CXX := $CXX
CC := $CC
CPPFLAGS := $CPPFLAGS
LDFLAGS := $LDFLAGS
biblios := $biblios
dest := $dest
INSTALLS := $INSTALLS

sourcescpp := $(cd PDFWriter && find . -name \*.cpp | tr \\012 ' ')
sourcesc := $(cd PDFWriter && find . -name \*.c | tr \\012 ' ')
sources := \${sourcescpp} \${sourcesc}
objscpp := \$(sourcescpp:.cpp=.o)
objsc := \$(sourcesc:.c=.o)
objs := \${objscpp} \${objsc}

libhummus.so: \${objs}
	\$(CXX) -shared -fpic \$(LDFLAGS) \$(biblios) \${objs} -o \$@

.cpp.o:
	\$(CXX) -c -fpic -I\$(INSTALLS)/include/freetype2 \$(CPPFLAGS) \$< -o \$@

.c.o:
	\$(CC) -c -fpic -I\$(INSTALLS)/include/freetype2 \$(CPPFLAGS) \$< -o \$@

install: libhummus.so
	mkdir -p "\$(dest)/include/Hummus" "\$(dest)/lib"
	cp libhummus.so "\$(dest)/lib/"
	ln -s libhummus.so "\$(dest)/lib/libPDFWriter.so"
	cp *.h "\$(dest)/include/Hummus/"
TERMINE
	configurer()
	{
		cd PDFWriter
	}
}

monMakeOrdonne()
{
	mucxx=$CXX
	[ ! -z $mucxx ] || mucxx=c++
	# En 3.5, PDFWriter.cpp initialise un truc à partir du DefaultEncryptionOptions, lui-même initialisé dans EncryptionOptions.cpp. Pour éviter le plantage, il nous faut ordonner ces fichiers relativement dans l'ordre qui permettra au second d'être initialisé avant le premier… et cet ordre n'est pas forcément logique.
	for i in 1 2
	do
		cat > $TMP/$$/Mu$i.cpp <<TERMINE
#include <stdio.h>
class Mu$i { Mu$i() { fprintf(stdout, "$i\n"); } static const Mu$i mono; };
const Mu$i Mu$i::mono;
TERMINE
		$mucxx -c -fPIC -o $TMP/$$/Mu$i.o $TMP/$$/Mu$i.cpp
	done
	cat > $TMP/$$/Mu.cpp <<TERMINE
int main(int argc, char ** argv)
{
	return 0;
}
TERMINE
	$mucxx -shared -o $TMP/$$/libmu.so $TMP/$$/Mu1.o $TMP/$$/Mu2.o
	$mucxx -o $TMP/$$/mu -L$TMP/$$ -lmu $TMP/$$/Mu.cpp
	filtrer PDFWriter/Makefile sed -E -e 's# \./(PDFWriter|EncryptionOptions)\.cpp##g'
	case `LD_LIBRARY_PATH=$TMP/$$ $TMP/$$/mu | head -1` in
		1) filtrer PDFWriter/Makefile sed -e '/^sourcescpp :=/{
s/:= */:= EncryptionOptions.cpp /
s/$/ PDFWriter.cpp/
}' ;;
		2) filtrer PDFWriter/Makefile sed -e '/^sourcescpp :=/{
s/:= */:= PDFWriter.cpp /
s/$/ EncryptionOptions.cpp/
}' ;;
	esac
}

[ -d "$dest" ] && exit 0

prerequis

obtenirEtAllerDansVersion

echo Correction… >&2
for modif in true $modifs ; do $modif ; done

echo Configuration… >&2
configurer

echo Compilation… >&2
make -j3

echo Installation… >&2
sudoku make install
sutiliser "$logiciel-$v_simple"

rm -Rf $TMP/$$
