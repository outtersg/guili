#!/bin/sh
# Copyright (c) 2005 Guillaume Outters
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e

Delirant() { local s2 ; while [ -h "$s" ] ; do s2="`readlink "$s"`" ; case "$s2" in [^/]*) s2="`dirname "$s"`/$s2" ;; esac ; s="$s2" ; done ; } ; SCRIPTS() { local s="`command -v "$0"`" ; [ -x "$s" -o ! -x "$0" ] || s="$0" ; case "$s" in */bin/*sh) case "`basename "$s"`" in *.*) true ;; *sh) s="$1" ;; esac ;; esac ; case "$s" in [^/]*) local d="`dirname "$s"`" ; s="`cd "$d" ; pwd`/`basename "$s"`" ;; esac ; Delirant ; s="`dirname "$s"`" ; Delirant ; SCRIPTS="$s" ; } ; SCRIPTS
. "$SCRIPTS/util.sh"

# git: pour récupérer les extensions
# openssl: pour httpfs
prerequis="langcxx() make cmake git \\ openssl"
modifs="$modifs j4"
v 0.10.3 || true
v 1.1.3 || true
v 1.2.2 || true
v 1.3.1 || true
v 1.3.2 || true
v 1.4.1 && modifs="$modifs chaussettedelespace" || true

archive=https://github.com/duckdb/duckdb/archive/refs/tags/v$version.tar.gz

predestiner="quelninja quellesext"

quelninja()
{
if false && versions ninja | grep -q .
then
	prerequis="ninja \\ $prerequis"
	export GEN=ninja
fi
}

# À FAIRE: BUILD_JDBC
#          apparemment après il faut faire un cd build/release/extension/ ; for EXTENSION in *; do ../duckdb -c "INSTALL '${EXTENSION}/${EXTENSION}.duckdb_extension';" ; done
#          Sinon https://github.com/duckdb/duckdb/blob/main/extension/README.md#using-extension-config-files:
#          extension/extension_config.cmake

quellesext()
{
	CORE_EXTENSIONS="autocomplete;json;fts;httpfs"
	for o in icu
	do
		if optionSi $o
		then
			case "$CORE_EXTENSIONS" in ?*) CORE_EXTENSIONS="$CORE_EXTENSIONS;" ;; esac
			CORE_EXTENSIONS="$CORE_EXTENSIONS$o"
		fi
	done
	if pg 1.4 $version # À FAIRE: gérer Python en >= 1.4. Il a été collé dans un silo à part. Pas d'instructions de co-construction, si ce n'est via un bidule en Rust (https://duckdb.org/docs/stable/dev/building/python).
	then
	if optionSi python
	then
		export BUILD_PYTHON=1
		# BUILD_PYTHON=1 génère et installe bien, mais à l'exécution (import duckdb): Undefined symbol "ASN1_STRING_length": en comparant bin/duckdb à la biblio-pont entre Python et DuckDB, on réalise qu'il manque à cette dernière par rapport au premier libcrypto.so et libssl.so.
		# Le tools/pythonpkg/README.md laisse penser que c'est parce qu'on a intégré httpfs aux CORE_EXTENSIONS.
		prerequis="patchelf \\ $prerequis"
		modifspostcompil="$modifspostcompil libpythonossl"
		fi
	fi
}

modifExt()
{
	# Les extensions étant chargées depuis git au moment de la construction, pour corriger une extension il nous faut réécrire le git localement.
	
	local ext="$1" ; shift
	local archive_git="`grep GIT_URL .github/config/extensions/$ext.cmake | awk '{print$2}'`"
	local version_git="`grep GIT_TAG .github/config/extensions/$ext.cmake | awk '{print$2}'`"
	
	# Il ne suffit pas de récupérer la branche main, car la rustine indiquée peut être sur une branche version, typiquement 1.4-andium, mention qui n'apparaît que dans .github/workflows/_extension_distribution.yml mais ça paraît être la chaîne d'IC de GitHub donc rien à voir.
	# Le plus sûr reste de tout télécharger, puis d'aller chercher la révision en question. D'où le --partout.
	agiter --partout -f .github/config/extensions/$ext.cmake "$archive_git" "$version_git" "$@"
}

chaussettedelespace()
{
	# "timespec n'existe pas, inclus par socket.h via curl"
	# En fait un problème d'#include collé dans le namespace duckdb au lieu d'être en haut comme il se devait.
	# https://github.com/duckdb/duckdb-httpfs/pull/139
	modifExt httpfs filtrer src/include/httpfs_curl_client.hpp sed -e '/#include <curl/d' -e '/^namespace/i\
#include <curl/curl.h>
'
}

j4()
{
	filtrer Makefile sed -e 's/cmake --build \.[^ ]*/& --parallel 4/g'
}

libpythonossl()
{
	pyvc() { printf $2$3 ; }
	local pyv="`python -V`"
	local pyvc="cpython-`IFS=". " ; pyvc $pyv`"
	patchelf --add-needed libcrypto.so --add-needed libssl.so "tools/pythonpkg/build/lib.`uname | tr A-Z a-z`-`uname -r`-`uname -m`-$pyvc/duckdb/duckdb.$pyvc.so"
	make # On réinstalle la biblio modifiée.
}

predestiner="$predestiner prerequisOpenssl"
for modif in true $predestiner ; do "$modif" ; done
destiner

prerequis

obtenirEtAllerDansVersion

echo Corrections… >&2
for modif in true $modifs ; do "$modif" ; done

echo Configuration… >&2

export OVERRIDE_GIT_DESCRIBE="v$version"
export COMMON_CMAKE_VARS="-DCMAKE_INSTALL_PREFIX=$dest"
export CORE_EXTENSIONS="$CORE_EXTENSIONS" # Calculées dans quellesext()

echo Compilation… >&2
make -j4
for modif in true $modifspostcompil ; do $modif "$@" ; done

echo Installation… >&2
sudoku cmake -P build/release/cmake_install.cmake

sutiliser
