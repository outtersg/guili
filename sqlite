#!/bin/sh
# Copyright (c) 2004,2009 Guillaume Outters
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e


DelieS() { local s2 ; while [ -h "$s" ] ; do s2="`readlink "$s"`" ; case "$s2" in [^/]*) s2="`dirname "$s"`/$s2" ;; esac ; s="$s2" ; done ; } ; SCRIPTS() { local s="`command -v "$0"`" ; [ -x "$s" -o ! -x "$0" ] || s="$0" ; case "`basename "$s"`" in *.*) true ;; *sh) s="$1" ;; esac ; case "$s" in [^/]*) s="`pwd`/$s" ;; esac ; DelieS ; s="`dirname "$s"`" ; DelieS ; SCRIPTS="$s" ; } ; SCRIPTS
. "$SCRIPTS/util.sh"
. "$SCRIPTS/util.opt.pcre.sh"

prerequis="zlib ncurses readline"
v 3.0.7 || true
v 3.6.4 || true
v 3.6.23.1 && modifs=foutuTclPourLePointH || true
v 3.7.17 && v_annee=2013 && modifs= || true
v 3.14.1 && v_annee=2016 || true
v 3.19.3 && v_annee=2017 || true
v 3.22.0 && v_annee=2018 || true
v 3.29.0 && v_annee=2019 || true
v 3.35.5 && v_annee=2021 && vautomake=">= 1.15 < 1.16" || true
v 3.36.0 || true
v 3.37.2 && v_annee=2022  || true
v 3.38.5 || true
v 3.39.0&& vautomake=">= 1.16" || true
v 3.39.4 || true
v 3.40.1 || true
v 3.41.2 && v_annee=2023 || true
v 3.42.0 || true
v 3.46.1 && v_annee=2024 || true
v 3.47.0 || true
v 3.47.2 || true
v 3.48.0 && v_annee=2025 || true
v 3.49.1 || true
v 3.50.2 || true
v 3.50.4 || true

option intarray && modifs="$modifs intarray" || true

option snapshot && modifs="$modifs snapshot" || true

# Modifications

avecNotif()
{
	filtrer sqlite3.c sed -e '1i\
#define SQLITE_ENABLE_UNLOCK_NOTIFY 1
'
}

pcre()
{
	options="$options --enable-pcre"
	local vr
	for vr in 3.50 3.41 3
	do
		pge $version $vr || continue
		patch -p0 < "$SCRIPTS/sqlite_pcre_a.$vr.patch"
		break
	done
	for vr in 3.50 3.47 3.44 3.38 3.36
	do
		pge $version $vr || continue
		patch -p0 < "$SCRIPTS/sqlite_pcre.$vr.patch"
		break
	done
	local pcre_c="$HOME/src/projets/sqlite3-pcre/pcre.c"
	[ -f "$pcre_c" ] || pcre_c="`obtenir https://raw.githubusercontent.com/outtersg/sqlite3-pcre/master/pcre.c`"
	local with=
	case "$argOptions-" in
		*+pcre2[-+]*) with="PCRE2" ;;
		*+pcre1[-+]*) with="PCRE1" ;;
		*+hyperscan[-+]*) with="HYPERSCAN" ;;
	esac
	[ -z "$with" ] || echo "#define WITH_$with 1" >> sqlite3.c
	cat "$pcre_c" >> sqlite3.c
	
	# Notre .patch modifie configure.ac, on autoconf donc.
	# Et comme notre version de libtool n'est pas forcément la même que celle utilisée par les mainteneurs SQLite, on re --force --install (https://stackoverflow.com/a/3205400/1346819).
	pge $version 3.50 ||
	autoreconf --force --install
}

snapshot()
{
	export CPPFLAGS="$CPPFLAGS -DSQLITE_ENABLE_SNAPSHOT"
}

intarray()
{
	# https://bugzilla.mozilla.org/show_bug.cgi?id=1055441#c28
	local f
	for f in test_intarray.c test_intarray.h
	do
		curl -k "https://www.sqlite.org/src/file?name=src/$f" | sed -e '1,/<pre>/d' -e '/<\/pre>/,$d' -e 's/&quot;/"/g' -e 's/&gt;/>/g' -e 's/&lt;/</g' -e 's/&amp;/\&/g' > "$f"
	done
	cat test_intarray.c >> sqlite3.c
}

foutuTclPourLePointH()
{
	for i in main.mk Makefile.in
	do
		filtrer "$i" sed -e "s#tclsh .*/mksqlite3h.tcl#\"$SCRIPTS/sqlite_mksqlite3h.sh\"#"
	done
}

# Variables

archive="https://www.sqlite.org/$logiciel-$version.tar.gz"
version_="`echo "$version" | tr . _`"
pge "$version" 3.6.24 && archive="https://www.sqlite.org/sqlite-amalgamation-$version_.zip"
version0="`echo "$version.0" | tr . '\012' | sed -e '2,$s/^/00/' -e '2,$s/.*\(..\)$/\1/' -e '5,63d' | tr -d '\012'`"
pge $version 3.7 && archive="https://www.sqlite.org/$v_annee/sqlite-autoconf-$version0.tar.gz"

prerequisPcre pcre2 pcre1

if option hyperscan || option pcre1 || option pcre2 || optionSi pcre
then
	prerequis="autoconf automake $vautomake m4 libtool \\ $prerequis" # La modification du configure.ac déclenche une regénération du reste.
	modifs="$modifs pcre"
fi

if option notif
then
	modifs="$modifs avecNotif"
fi

destiner

prerequis

echo Obtention et décompression… >&2
obtenirEtAllerDansVersion

echo Correction… >&2
for modif in true $modifs ; do $modif ; done

echo Configuration… >&2
if pge $version 3.6.24 && ! pge $version 3.7
then
	true
else
	./configure --prefix="$dest" --enable-threadsafe $options
fi

echo Compilation… >&2
if pge $version 3.6.24 && ! pge $version 3.7
then
	if uname | grep -q Linux
	then
		cc -fPIC -c sqlite3.c -o sqlite3.o && ar rcs libsqlite3.a sqlite3.o && gcc -shared -o libsqlite3.so sqlite3.o
	else
	cc -c sqlite3.c -o sqlite3.o && ar rcs libsqlite3.a sqlite3.o && gcc -shared -o libsqlite3.so sqlite3.o
	fi
else
	make
fi

# Pour tester que mon regexp PCRE (qui accepte les options directement dans l'expression, façon /expr/i pour l'indifférent à la casse)
# prend bien le pas à la fois sur celui ICU, et sur celui codé en dur dans sqlite3 CLI:
# Le bidule suivant (lancé dans le dossier de compilation) doit renvoyer deux fois (une PHP, une CLI):
#   ABC
#   abc
#   ABC
# Si seulement ABC: on est sur l'implémentation ICU ou intégrée CLI
# Si erreur: pas de regexp
# ( export PATH=".:$PATH" LD_LIBRARY_PATH=`pwd`/.libs:$LD_LIBRARY_PATH ; r0="create table t (t text)" ; r1="insert into t values ('ABC')" ; r2="insert into t values ('abc')" ; r3="select * from t where t regexp '/B/i'" ; r4="select * from t where t regexp 'B'" ; php -r '$bdd = new PDO("sqlite::memory:"); foreach(["'"$r0"'","'"$r1"'","'"$r2"'","'"$r3"'","'"$r4"'"] as $i => $r) { $r = $bdd->query($r); if($i >= 3) print_r($r->fetchAll()); }' ; sqlite3 :memory: "$r0; $r1; $r2; $r3; $r4;" )

echo Installation… >&2
if pge $version 3.6.24 && ! pge $version 3.7
then
	sudo mkdir -p "$dest/lib" "$dest/include"
	sudo cp libsqlite3.a "$dest/lib/"
	sudo cp sqlite3.h "$dest/include"
else
	sudo make install
fi

sutiliser

# Pour éviter qu'un select plante un insert:
# https://dba.stackexchange.com/questions/47919/how-do-i-specify-a-timeout-in-sqlite3-from-the-command-line
jaune "Pensez à commencer vos sessions par un .timeout 1000"
