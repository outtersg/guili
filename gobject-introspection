#!/bin/sh
# Copyright (c) 2005 Guillaume Outters
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e

Delirant() { local s2 ; while [ -h "$s" ] ; do s2="`readlink "$s"`" ; case "$s2" in [^/]*) s2="`dirname "$s"`/$s2" ;; esac ; s="$s2" ; done ; } ; SCRIPTS() { local s="`command -v "$0"`" ; [ -x "$s" -o ! -x "$0" ] || s="$0" ; case "$s" in */bin/*sh) case "`basename "$s"`" in *.*) true ;; *sh) s="$1" ;; esac ;; esac ; case "$s" in [^/]*) local d="`dirname "$s"`" ; s="`cd "$d" ; pwd`/`basename "$s"`" ;; esac ; Delirant ; s="`dirname "$s"`" ; Delirant ; SCRIPTS="$s" ; } ; SCRIPTS
. "$SCRIPTS/util.sh"

# Quelle bande d'abrutis, glib 2.83.0 introduit une dépendance circulaire avec gobject-introspection, cf. https://tecnocode.co.uk/talks/guadec-introspection-presentation-2024/presentation.pdf
# Bon sinon il ira se télécharger un glib (qu'on imagine qu'il triture pour le compiler sans lui), mais tout de même quel foutoir leur truc.
# zlib indispensable pour que pkg-config détecte certains sous-projets de glib (gio).
v 1.31.22 && prerequis="pkgconfig \\ zlib glib < 2.83 libffi" && modifs="foutuMerdierMac msvc" || true
v 1.61.1 && prerequis="meson >= 0.49.2 ninja \\ zlib glib < 2.83 gettext" || true
v 1.63.2 && remplacerPrerequis "meson >= 0.50.1" || true
v 1.76.1 && prerequis="python >= 3 meson ninja pkgconfig cmake \\ zlib glib >= 2.76 < 2.83 libffi" && modifs="$modifs tEsPasToutSeul" || true
v 1.78.1 && remplacerPrerequis "glib >= 2.78 < 2.83" || true
v 1.79.1 && remplacerPrerequis "glib >= 2.79 < 2.83" || true
v 1.80.1 && remplacerPrerequis "glib >= 2.80 < 2.83" || true

vmin="`echo "$version" | cut -d . -f 1-2`"
archive="https://download.gnome.org/sources/$logiciel/$vmin/$logiciel-$version.tar.xz"

tEsPasToutSeul()
{
	return 0 # Cf. la conclusion sur XDG_DATA_DIRS.
	
	# Énorme! En 20 ans, c'est la première fois que je vois un logiciel qui au lieu d'aller chercher dans un $MACHIN_PATH,
	# code en dur *un seul* dossier dans lequel aller chercher ses .gir.
	# Donc au début tout se passe bien parce que gobject-introspection y prégénère les fichiers pour les biblios gobject qu'il trouve déjà installées,
	# par contre le jour où une nouvelle biblio (ex.: gdk-pixbuf), voyant gobject-introspection, décide de générer son .gir,
	# elle le fait dans son propre ~/local/logiciel-version/share/gir-1.0 que ne voient pas les outils gir, obnubilés par leur ~/local/gobject-introspection-version/share/gir-1.0!
	# … Et évidemment tout en dur, sans possibilité de surcharger par une variable d'environnement.
	
	# Pour trifouiller le meson.build:
	# Afin qu'il installe les .gir prégénérés dans $INSTALLS/$logiciel-$version, mais cherche dans $INSTALLS,
	# il faut bien distinguer les variables servant à la construction (et l'install), de celles qui seront exploitées à l'exécution.
	# gir/meson.build montre que l'install_dir est défini à girdir (défini dans le meson.build racine), donc girdir doit être préservée.
	# par contre le GIR_DIR = girdir doit être modifié, GIR_DIR étant ensuite codé en dur dans les exécutables.
	filtrer meson.build sed \
		-e "/gir-1.0/s#gir_dir_pc_prefix#'$INSTALLS/share'#" \
		-e "/GIR_DIR/s#girdir#'$INSTALLS/share/gir-1.0'#"
	
	# … Sauf que ce gros con introduit une fumeuse intelligence qui dit "je commence par chercher dans ../share/gir-1.0, et seulement si je ne trouve pas je bascule sur mon GIR_DIR codé en dur" (cf. bin/g-ir-*, "Try using relative paths first so that the installation prefix is relocatable").
	# Donc si on le laisse installer un gir-1.0 il va le dénicher, et ne pas utiliser notre machin codé en dur.
	# Si c'est le cas on est recoincés (on doit lui faire installer directement dans $INSTALLS, tant pis), en écrasant girdir:
	#   -e "/gir-1.0/s#gir_dir_prefix#'$INSTALLS/share'#"
	# à la place du GIR_DIR
	# Ex. dans la compil de librsvg:
	#   Couldn't find include 'GdkPixbuf-2.0.gir' (search path: '['.', '/home/gui/local/gobject-introspection+cairo-1.76.1/share', 'gir-1.0', '/usr/local/share/gir-1.0', '/usr/share/gir-1.0', '/home/gui/local/gobject-introspection+cairo-1.76.1/share/gir-1.0', '/usr/share/gir-1.0']')
	# Sa notion de path étant définie dans lib/gobject-introspection/giscanner/utils.py:get_system_data_dirs()
	# Oh miracle on déniche une variable d'env XDG_DATA_DIRS!
	# Appelée indirectement par lib/gobject-introspection/giscanner/transformer.py:_get_gi_data_dirs() qui appelle la précédente.
}

msvc()
{
	# Pourquoi sont-ils allés me coller en dur un compilo dont je me contrefiche?
	if python -c "from distutils.msvccompiler import MSVCCompiler" 2> /dev/null ; then return 0 ; fi
	
	filtrer giscanner/ccompiler.py sed \
		-e '/import.*MSVC/d' \
		-e 's/isinstance(.*MSVCCompiler)/False/g'
}

foutuMerdierMac()
{
	# Cet abruti de configure refuse d'aller chercher nm dans le PATH qu'on lui a défini.
	NM="`command -v nm`"
	export NM
	return
	CPPFLAGS="$CPPFLAGS -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/usr/include"
	CFLAGS="$CPPFLAGS"
	CXXFLAGS="$CPPFLAGS"
	export CPPFLAGS CFLAGS CXXFLAGS
}

optionSi cairo || true

destiner

prerequis

obtenirEtAllerDansVersion

echo Correction… >&2
for modif in true $modifs ; do $modif ; done

echo Configuration… >&2
if [ -f meson.build ]
then
	mkdir -p build
	meson setup build --buildtype=release --prefix="$dest"
	cd build
	make=ninja
else
./configure --prefix="$dest" --disable-Bsymbolic
	make=make
fi

echo Compilation… >&2
$make

echo Installation… >&2
if [ -f ../meson.build ]
then
	sudokupy $make install
else
sudo make install
fi

sutiliser
