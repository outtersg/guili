#!/bin/sh
# Copyright (c) 2006,2019 Guillaume Outters
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e

Delirant() { local s2 ; while [ -h "$s" ] ; do s2="`readlink "$s"`" ; case "$s2" in [^/]*) s2="`dirname "$s"`/$s2" ;; esac ; s="$s2" ; done ; } ; SCRIPTS() { local s="`command -v "$0"`" ; [ -x "$s" -o ! -x "$0" ] || s="$0" ; case "$s" in */bin/*sh) case "`basename "$s"`" in *.*) true ;; *sh) s="$1" ;; esac ;; esac ; case "$s" in [^/]*) local d="`dirname "$s"`" ; s="`cd "$d" ; pwd`/`basename "$s"`" ;; esac ; Delirant ; s="`dirname "$s"`" ; Delirant ; SCRIPTS="$s" ; } ; SCRIPTS
. "$SCRIPTS/util.sh"

# Historique des versions gérées

OPTIONS_CONF=

# Options correspondant à des modules Python à embarquer dans la distribution que l'on crée.
optionsModules="selinux"

# Il nous faudra un cURL pour accéder à pypa.io.
# zlib pour pip.
v 2.6 && modifs= && prerequis="sqlite openssl < 1.1 curl zlib" || true
v 2.6.5 && modifs="incdir" || true
v 2.6.6 && modifs="incdir fbsdopenssl" || true
v 2.7 || true
v 2.7.2 && modifs="incdirbourrin fbsdopenssl" || true
v 2.7.9 && modifs="incdirbourrin" || true
v 2.7.11 && modifs="incdirbourrin nouveaumac" || true
v 2.7.13 || true
v 2.7.14 || true
v 2.7.15 || true
v 2.7.16 || true
# À FAIRE: sur mon FreeBSD 10.2, failed to compile bsddb readline: pour le second, prérequérir readline et ncurses ferait-il l'affaire?
v 3.4.3 && modifs="incdirbourrin testsLocalhost shellaligans" && remplacerPrerequis "openssl" && prerequis="$prerequis gettext libffi" || true
v 3.6.2 || true
v 3.7.4 || true
v 3.7.6 || true
v 3.9.5 || true
v 3.9.7 || true
v 3.9.16 || true
v 3.10.10 || true
v 3.11.2 || true
v 3.12.7 || true
v 3.13.1 || true
v 3.13.2 || true
v 3.13.7 || true

# Modifications

testsLocalhost()
{
	local localhost="`localhost`"
	[ -n "$localhost" -a "$localhost" != 127.0.0.1 ] || return 0
	
	rm -f Lib/test/test_socket.py
	
	# Ce qui suit ne marche pas; on sera plus efficaces ci-dessus.
	true || \
	grep -rl 127.0.0.1 Lib/test | while read f
	do
		filtrer "$f" sed -e "s/127.0.0.1/$localhost/g"
	done
}

# Enrobe un python binaire de quelque chose qui lui donne l'environnement nécessaires (en particulier le LD_LIBRARY_PATH).
pythonenboiter()
{
	local d="$TMP/$$/dest" f nom binaire pyp="`pyp`"
	mkdir -p "$d/bin"
	for binaire in python
	do
		find "$dest/bin" -maxdepth 1 -type f -name "$binaire*" -perm -a+x -not -name "*.bin" | grep "/$binaire[.0-9]*$" | while read f
		do
			head -1 < "$f" | grep -q '^#!' && continue || true # Les scripts ne nous intéressent pas.
			# Une première approche, par script shell python invoquant le vrai python (renommé python.bin) après avoir défini l'environnement, ne fonctionne pas, car:
			# - Les scripts python qui utilisent #!/…/bin/python se plantent, puisque l'interpréteur ciblé n'en est plus un mais est un script shell (donc interprété); en conséquence l'OS décide de faire interpréter le script "client" par /bin/sh, ce qui ne marche pas des masses.
			# - Les scripts installés post-remplacement (ex.: pip, easy_install, etc.) détectent qu'ils ont été lancés en fait par python.bin (leur $0), et donc codent celui-ci comme interpréteur. Sur ce dernier point on est bons, mais le script client ne passe alors plus par la surcharge d'environnement du …/bin/python.
			# On passe donc par un binaire (qui ne modifie surtout pas l'argv[0] en appelant le .bin, de manière à ce que le binaire réel se croie appelé python).
			# $PYEXT: pour éviter de polluer notre install, les extensions installées après Python lui-même iront se placer dans un dossier centralisé. On l'ajoute donc à notre chemin.
			# Avantage supplémentaire: notre installation d'un 3.9.1, puis 3.9.2, puis 3.9.3 liront le même $PYEXT: inutile d'installer trois fois chaque extension.
			# Mais reste encore un souci: par PYTHONPATH, on atteint les modules inclus directement sous le dossier. Par contre, ceux figurant sous un sous-dossier .egg, même si celui-ci est référencé par un easy-install.pth, ne sont pas chargés: les .pth ne sont lus que depuis le site-packages du dossier de python, codé en dur.
			# Donc, du moment que les site-packages ne sont pas bloqués, le pyext.pth (cf. plus bas) sera plus robuste.
			nom="`basename "$f"`"
			cp "$f" "$d/bin/$nom.bin"
			sed \
				-e "s#\$bin#$dest/bin/$nom.bin#g" \
				-e "s#\$PATH#$dest/bin:$INSTALLS/bin#g" \
				-e "s#\$LD_LIBRARY_PATH#$dest/lib:$INSTALLS/lib64:$INSTALLS/lib#g" \
				-e "s#\$PYTHONPATH#$INSTALLS/$PYEXT/$pyp:$dest/$pyp#g" \
				< "$SCRIPTS/pythonenboite.c" > "$TMP/$$/$nom.c"
			$CC -o "$d/bin/$nom" "$TMP/$$/$nom.c"
			chmod a+x "$d/bin/$nom.bin" "$d/bin/$nom"
		done
	done
	sudoku "$SCRIPTS/installer" "$d" "$dest"
	
	# Constitution d'un .pth sachant charger depuis $PYEXT;
	# non seulement les .py (ça on sait déjà faire, $PYEXT étant présumé dans $PYTHONPATH),
	# mais aussi les .pth (par exemple easy-install.pth, et donc tous les .egg).
	echo "import sys; addsitedir(\"$INSTALLS/$PYEXT/`pypo`\");" | sudokupy sh -c "cat > $dest/`pypo`/pyext.pth"
}

# pyp() mais avec la version planifiée pour install et non la courante.
pypo()
{
	deux() { printf "$1.$2" ; }
	echo "lib/python`IFS=. ; tifs deux $version`/site-packages"
}

selinuxrobuste()
{
	# Le module SELinux "public" est une simple coquille d'amorçage du module SELinux système (qui lui possède entre autre le .so avec les vraies fonctions).
	# Pour ce faire, il charge le python système (dans la même version majeure que lui), lui fait lister ses modules, et s'il trouve selinux, il (le module coquille vide) se remplace par ce dernier (le vrai module) en demandant à Python de se recharger (le module selinux).
	
	# Ces orifices du postérieur codent en dur un chemin vers Python sans même avoir vérifié qu'il existât.
	# Ce qui empêche par exemple d'installer un Python 3 sur un OS n'ayant qu'un Python 2 dans son /usr/bin: il se vautre en essayant de charger /usr/bin/python3
	grep -rl /usr/bin/python "$dest"/lib/python*/site-packages/selinux | grep py$ | while read retape
	do
		sufiltrer "$retape" sed -e 's#/usr/bin/python#python#g'
	done
	
	# Et le module coquille cherche à utiliser json pour communiquer avec le python système: or sur certaines vieilles bécanes sur lesquelles on veut installer un Python 2.7 par dessus celui système en 2.4, notre 2.7 sait parler json, mais pas le 2.4, ce qui donne lieu à un beau plantage.
	# On remplace donc par une discussion chaîne de caractères, avec pour ponctuation de caractère ASCII 0x03.
	( cd "$dest" && sudoku patch -p0 < "$SCRIPTS/python.selinux.vieilos.patch" && sudoku rm -f lib/python*/site-packages/selinux/*.pyc 2> /dev/null )
}

refsSansSuffixe()
{
	if [ -e "$dest/include/python${vm}m" -a ! -e "$dest/include/python$vm" ] ; then
		sudo ln -s python${vm}m "$dest/include/python$vm"
	fi
}

nouveaumac()
{
	# Recompiler un Python 2.7 sur un Mac dont il n'avait pas connaissance entraîne quelques soucis.
	case `uname` in
		Darwin)
			if [ `uname -r | cut -d . -f 1` -ge 13 ]
			then
				filtrer configure sed -e '/CONFIGURE_MACOSX_DEPLOYMENT_TARGET=.*cur_target/i\
cur_target=10.8
'
				OPTIONS_CONF="$OPTIONS_CONF --disable-toolbox-glue"
				filtrer Lib/urllib.py sed \
					-e '/from _scproxy/,/return False/d' \
					-e '/def getproxies_macosx_sysconf/,/^ *return/d' \
					-e 's/proxy_bypass_macosx_sysconf/proxy_bypass_environment/g' \
					-e 's/getproxies_macosx_sysconf/getproxies_environment/g'
			fi
	esac
}

incdir()
{
	filtrer setup.py sed -e "/inc_dirs = /s#\$# + ['$INSTALLS/include']#"
}

shellaligans()
{
	# Qu'est-ce que c'est que cette blague d'utiliser du $(shell pwd) (ou realpath, ou test) un peu partout?
	# Sur BSDmake c'est de la merde ça plante tout: la commande n'étant pas reconnue renvoie du vide (mais sans planter???), transformant des d="$(shell pwd)/dossier" en d=/dossier et forcément quand il s'agit d'écrire dedans, à moins d'être root… (mais bien sûr tout le monde installe son python en root?)
	# Au départ pas trop grave (jusque dans les 3.9 n'était utilisé qu'à un endroit en compil croisée),
	# mais désormais utilisée pour absolutiser par un $(shell pwd) le dossier de ponte des stats de profilage.
	local f
	for f in configure.ac configure
	do
		filtrer "$f" sed \
			-e 's/\\\$(shell \([^)]*\))/\`\1\`/g' \
			-e 's/\$(shell \([^)]*\))/`\1`/g'
	done
}

incdirfinal()
{
	# Notre $INSTALLS/include doit être inclus, certes, mais à la fin. Sinon par exemple l'expat de notre $INSTALLS prendra le pas (pour les includes) sur celui embarqué par Python, et on va avoir des conflits. Donc on essaie de trouver la variable à laquelle se rajouter pour modifier l'inc_dirs *par la fin*.
	filtrer setup.py sed -e '/add_dir_to_list.*usr.local.include/{
h
s#/usr/local/include#'"$INSTALLS/include"'#
p
x
}'
}

incdirbourrin()
{
	# De toute façon le Makefile.pre.in fait passer les CFLAGS devant tout le monde. Il faut donc qu'on y indique, dans cet ordre, les include des biblios embarquées par Python, puis notre CFLAGS "local".
	CFLAGS="-I`pwd`/Modules/expat $CFLAGS"
	# Python fait le lien final de la façon suivante: cc $LDFLAGS -L. -lpython2.7 -o python python.o. Du coup, si un python, de même version majeure, était déjà installé, ce sera lui qui sera lié de préférence à la libpython tout juste générée dans .. On se permet donc de rappeler au Make que son dossier local est prioritaire sur tout.
	LDFLAGS="-L. $LDFLAGS"
}

thrdlfbsd()
{
	# Magistral! Sous FreeBSD 7.3, le dlopen, dans des circonstances encore inconnues, change de thread durant son appel. Du coup, comme Python s'assure un lock, et vérifie en sortie que le thread relâchant le lock est bien celui qui l'a mis, ça explose. On fait donc une vérif en sortie de dlopen.
	# Pour vérifier, on peut effectuer le test suivant sous Python en interactif (pas en -c, car il faut que les instructions soient lancées séparément pour partir du même thread non perverti).
	# import _ssl # Ne passe pas.
	# import dl
	# dl.open('…/_ssl.so
	# import _ssl # Passe, car le dl.open a été fait par ailleurs.
	[ "`uname -s`" = FreeBSD ] && patch -p0 <<TERMINE
diff -ru Python/dynload_shlib.c Python/dynload_shlib.c
--- Python/dynload_shlib.c	2010-09-03 02:41:57.000000000 +0200
+++ Python/dynload_shlib.c	2010-09-03 02:40:56.000000000 +0200
@@ -65,6 +65,9 @@
 } handles[128];
 static int nhandles = 0;
 
+#ifdef WITH_THREAD
+extern long import_lock_thread;
+#endif
 
 dl_funcptr _PyImport_GetDynLoadFunc(const char *fqname, const char *shortname,
                                     const char *pathname, FILE *fp)
@@ -127,6 +130,15 @@
     pathname = pathbuf;
 #endif
 
+	#ifdef WITH_THREAD
+	long me = PyThread_get_thread_ident();
+	#endif
+    handle = dlopen(pathname, dlopenflags);
+	#ifdef WITH_THREAD
+	long menow = PyThread_get_thread_ident();
+	if(menow != me && import_lock_thread == me)
+		import_lock_thread = menow; /* Ugh! Why did pthread_self() change with the dlopen()? And how can we ensure that the original thread ID is not still running, opening other modules at the same time as us? */
+	#endif
     handle = dlopen(pathname, dlopenflags);
 
     if (handle == NULL) {
diff -ru Python/import.c Python/import.c
--- Python/import.c	2010-09-03 02:34:26.000000000 +0200
+++ Python/import.c	2010-09-03 02:40:59.000000000 +0200
@@ -253,7 +253,7 @@
 #include "pythread.h"
 
 static PyThread_type_lock import_lock = 0;
-static long import_lock_thread = -1;
+long import_lock_thread = -1;
 static int import_lock_level = 0;
 
 void
TERMINE
	# Celui-ci est récupéré des ports de FreeBSD.
	[ "`uname -s`" = FreeBSD ] && patch -p0 <<TERMINE
--- Python/thread_pthread.h.orig	2010-05-09 22:46:46.000000000 +0800
+++ Python/thread_pthread.h	2010-08-15 14:27:51.886823397 +0800
@@ -26,13 +26,18 @@
 #endif
 #endif
 
+#ifdef __FreeBSD__
+#include <osreldate.h>
+#endif
+
 /* The POSIX spec says that implementations supporting the sem_*
    family of functions must indicate this by defining
    _POSIX_SEMAPHORES. */
 #ifdef _POSIX_SEMAPHORES
 /* On FreeBSD 4.x, _POSIX_SEMAPHORES is defined empty, so
    we need to add 0 to make it work there as well. */
-#if (_POSIX_SEMAPHORES+0) == -1
+#if defined(__FreeBSD__) && __FreeBSD_version < 701104 && \\
+    (_POSIX_SEMAPHORES+0) == -1
 #define HAVE_BROKEN_POSIX_SEMAPHORES
 #else
 #include <semaphore.h>
@@ -44,7 +49,6 @@
    in default setting.  So the process scope is preferred to get
    enough number of threads to work. */
 #ifdef __FreeBSD__
-#include <osreldate.h>
 #if __FreeBSD_version >= 500000 && __FreeBSD_version < 504101
 #undef PTHREAD_SYSTEM_SCHED_SUPPORTED
 #endif
@@ -149,6 +153,7 @@
 {
     pthread_t th;
     int status;
+    sigset_t set, oset;
 #if defined(THREAD_STACK_SIZE) || defined(PTHREAD_SYSTEM_SCHED_SUPPORTED)
     pthread_attr_t attrs;
 #endif
@@ -177,6 +182,8 @@
 #if defined(PTHREAD_SYSTEM_SCHED_SUPPORTED)
     pthread_attr_setscope(&attrs, PTHREAD_SCOPE_SYSTEM);
 #endif
+    sigfillset(&set);
+    SET_THREAD_SIGMASK(SIG_BLOCK, &set, &oset);
 
     status = pthread_create(&th,
 #if defined(THREAD_STACK_SIZE) || defined(PTHREAD_SYSTEM_SCHED_SUPPORTED)
@@ -188,6 +195,7 @@
                              (void *)arg
                              );
 
+    SET_THREAD_SIGMASK(SIG_SETMASK, &oset, NULL);
 #if defined(THREAD_STACK_SIZE) || defined(PTHREAD_SYSTEM_SCHED_SUPPORTED)
     pthread_attr_destroy(&attrs);
 #endif
TERMINE
}

thrfbsd()
{
	# Bon, finalement, la modif suivante ne suffit pas: apparemment c'est tout pthread qui est foireux sous FreeBSD, à en croire les forums. D'ailleurs le saut de threads de dlopen nous joue encore des tours malgré la manip précédente: une fois un dlopen appelé, le thread principal n'est plus thread principal. Or dans CalendarServer, le thread qui se croit principal s'envoit un signal (pour relire sa conf)… et Python, qui interdit cela depuis un thread secondaire, explose.
	# Alors on fait comme tout le monde (je crois que c'est ainsi que fonctionne le port de Python): on désactive purement et simplement les Pthreads.
	[ "`uname -s`" = FreeBSD ] && OPTIONS_CONF="$OPTIONS_CONF --with-pth"
	# À FAIRE: en fait récupérer en plus le patch de désactivation complète des phtreads. Cf. fbsd() plus bas.
}

fbsd()
{
	# Bon, manquerait au moins le patch qui désactive vraiment les pthreads d'/usr/ports; ou alors celui qui empêche les signaux de remonter dans un thread secondaire. Les Pthreads semblent encore bien actifs. En tout état de cause, on aura plus vite fait de lancer le make d'/usr/ports, qui me semble suffisant pour ce que je veux faire.
	if [ "`uname -s`" = FreeBSD ]
	then
		vfbsd="`echo "$version" | sed -e 's/\([0-9]*\)\.\([0-9]*\).*/\1\2/'`"
		cd /usr/ports/lang/python$vfbsd
		version="`grep 'PORTVERSION *=' < Makefile | sed -e 's/^[^=]*= *//' -e 's/ *$//'`" # Ben on prend ce qu'ils nous proposent.
		dest="$INSTALLS/$logiciel-$version"
		sudo /usr/bin/make PREFIX="$dest" install
		sutiliser "$logiciel-$version"
		exit 0
	fi
}

fbsdopenssl()
{
	# Bon, alors en fait personne n'arrive à faire démarrer ce putain de Python. À force d'investigation, j'ai fini par mieux cerner: en fait c'est le fait que Python charge OpenSSL qui fout la grouille. Genre celui-ci lance, à son initialisation, un second thread sur lequel tout le monde bascule. La solution est simple: charger OpenSSL avant le main() de Python, de façon à ce que l'on soit déjà dans le second thread lorsque Python se pose la question « alors, voyons, dans quel thread suis-je, que nous le décrétions thread principal? ».
	# Et pour faire propre, on voulait fouiller le LD_LIBRARY_PATH bout par bout, plus les bibliothèques système.
	# Mais ça ne marche pas, car lorsque le LD_LIBRARY_PATH ne contient pas libssl.so (ou contient une version incompatible avec celle avec laquelle on a compilé, par exemple lorsque l'on tourne en root qui ne voit qu'/usr/lib et non /usr/local/lib), l'import _ssl semble quand même marcher, ce qui voudrait dire qu'il arrive soit à recomposer ses petits (oui je sais c'est abominable), soit à se lier in fine avec un libssl.so d'une autre version mais compatible.
	# Quoi qu'il en soit, le plus prudent, même si c'est dégueu parce que codage en dur empêchant le déplacement, c'est de ne reposer que sur la présence de _ssl.so.
	
	# Ici avec _ssl.so en dur:
	[ "`uname -s`" = FreeBSD ] && filtrer Modules/python.c sed -e '/#include "Python.h"/a\
#include <dlfcn.h>
' -e '/return Py_Main/i\
dlopen("'"$dest/lib/python$vm"'/lib-dynload/_ssl.so", 0);
'
	
	# Ici avec libssl.so dans LD_LIBRARY_PATH:
	if false
	then
	[ "`uname -s`" = FreeBSD ] && filtrer Modules/python.c sed -e '/#include "Python.h"/a\
#include <dlfcn.h>
' -e '/return Py_Main/{
i\
char * ldlp = getenv("LD_LIBRARY_PATH");
i\
const char * slp = "/usr/lib:/lib";
i\
char * lp = (char *)malloc((ldlp ? strlen(ldlp) + 1 : 0) + strlen(slp) + 1);
i\
char * l = (char *)malloc((ldlp ? strlen(ldlp) + 1 : 0) + strlen(slp) + 10 + 1);
i\
if(ldlp)
i\
{
i\
strcpy(lp, ldlp);
i\
strcat(lp, ":");
i\
}
i\
else
i\
*lp = 0;
i\
strcat(lp, slp);
i\
char * endp = strchr(lp, 0);
i\
char * p, * ep;
i\
for(p = lp; p < endp; p = ep + 1)
i\
{
i\
(ep = strchr(p, '\':\'')) || (ep = strchr(p, 0));
i\
strncpy(l, p, ep - p);
i\
strcpy(&l[ep - p], "/libssl.so");
i\
if(dlopen(l, 0))
i\
break;
i\
}
i\
free(l);
i\
free(lp);
}'
	fi
}

# Variables

archive="http://www.python.org/ftp/$logiciel/$version/Python-$version.tar.bz2"
pge "$version" 2.7.9 && archive="http://www.python.org/ftp/$logiciel/$version/Python-$version.tar.xz" || true
vmami() { unset IFS ; vmaj=$1 ; vm=$1.$2 ; }
IFS=. ; vmami $version

if false
then
	cd /tmp/Python-$version
	echo "BASH EN ROUTE"
	bash
else

optionSi sqlite || true
prerequisOpenssl --si-present # Quand même assez nécessaire pour aller chercher des trucs ez_setup.py etc. sur du https:// en 2019. Mais bon faisons comme si c'était optionnel.
optionSi curl || true
pg 3.3 $version || opSiPasPas xz || true # Pour éviter que lzma.py pète en No module named '_lzma' (utilisé entre autres par meson).
pge $version 3 && OPTIONS_CONF="$OPTIONS_CONF --with-system-ffi" || true
confOptims()
{
	case "$CC" in
		# /!\ Il faut non seulement le binaire llvm-profdata, mais aussi que llvm/clang ait été compilé avec compiler-rt.
		# À FAIRE: le vérifier?
		clang) commande llvm-profdata || return 0 ; export LLVM_PROFDATA="`command -v llvm-profdata`" ;;
	esac
	# Sur les petites machines, les optims poussent la mémoire à bout: on abandonne.
	case `uname` in
		FreeBSD) case $((`sysctl -n hw.usermem` >= 1024 * 1024 * 1024)) in 0) return 0 ;; esac
	esac
( pg 3.5.3 $version && pge $version 3 ) || pg 2.7.13 $version || OPTIONS_CONF="$OPTIONS_CONF --enable-optimizations" # Quadruplement du temps de compil pour 20% de gain à l'exécution.
}
# Option o0: pour https://github.com/llvm/llvm-project/issues/59139 /!\ Le fait de passer par une option fait que la version non optimisée passera devant celle optimisée (puisqu'ordre fondé sur le nombre d'options).
option o0 ||
confOptims

for option in $optionsModules ; do option "$option" || true ; done # Assurons destiner() que nous prenons en charge ces options (qui entreront dans le nom du dossier $dest), même si on ne les exploite qu'un peu plus loin.

! mac ||
similisys # Sur Mac en tout cas, scproxy (accès au paramétrage système) se lie à CoreQuelqueChose qui attaque une sqlite et un iconv bien précis.

destiner

prerequis

obtenirEtAllerDansVersion

echo Correction… >&2
for modif in true $modifs ; do $modif ; done

echo Configuration… >&2
./configure --prefix="$dest" --enable-shared $OPTIONS_CONF

echo Compilation… >&2
# Certains tests (robot_parser par exemple) montant un client - serveur, il ne faut surtout pas passer par le proxy pour ce genre de choses.
( proxy "" && make -j4 )

fi

echo Installation… >&2
# Notre python n'étant pas encore installé, on surcharge pyp (qui repose sur le python installé).
( pyp() { pypo ; } ; proxy "" && sudokupy make install )
for bin in python pip
do
	[ -e "$dest/bin/$bin" -o ! -e "$dest/bin/$bin$vmaj" ] || sudoku ln -s $bin$vmaj "$dest/bin/$bin"
done
pythonenboiter
# http://legacy.python.org/dev/peps/pep-3149/
# Sur certains systèmes, Python suffixe un peu tout (ex.: include/python3.4m, avec un m pour -with-pymalloc; mais l'include/python3.4 n'existe pas). Pour permettre aux autres logiciels de s'y retrouver, on crée à l'emplacement de référence un lien symbolique vers une de ces versions.
refsSansSuffixe

echo Biblios standard… >&2
	if pge "$version" 2.7.9
	then
	pge $version 3 || sudokupy "$dest/bin/python" -m ensurepip
	sudokupy "$dest/bin/pip" install setuptools
	else
	curl -O 'https://bootstrap.pypa.io/ez_setup.py'
	sudokupy "$dest/bin/python" ez_setup.py # ez_setup installe les setuptools avant qu'ils fussent sous pip.
fi

modules="`for option in $optionsModules ; do option "$option" && echo "$option" || true ; done`"
if [ -n "$modules" ]
then
	sudokupy "$dest/bin/pip" install $modules
fi
if option selinux
then
	selinuxrobuste
fi

sutiliser

# Cet abruti crée des .pyc en root dans l'arbo de compil (appartenant au compte courant). Le ménage effectué par trap EXIT va se planter si ces fichiers persistent. Il faut donc faire un pré-ménage.
find . \( -name __pycache__ -o -user root \) -print0 | sudoku xargs -0 rm -Rf
