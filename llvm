#!/bin/sh
# Copyright (c) 2005 Guillaume Outters
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e

Delirant() { local s2 ; while [ -h "$s" ] ; do s2="`readlink "$s"`" ; case "$s2" in [^/]*) s2="`dirname "$s"`/$s2" ;; esac ; s="$s2" ; done ; } ; SCRIPTS() { local s="`command -v "$0"`" ; [ -x "$s" -o ! -x "$0" ] || s="$0" ; case "$s" in */bin/*sh) case "`basename "$s"`" in *.*) true ;; *sh) s="$1" ;; esac ;; esac ; case "$s" in [^/]*) local d="`dirname "$s"`" ; s="`cd "$d" ; pwd`/`basename "$s"`" ;; esac ; Delirant ; s="`dirname "$s"`" ; Delirant ; SCRIPTS="$s" ; } ; SCRIPTS
. "$SCRIPTS/util.sh"

# Chemin de compilation pour un FreeBSD 11.2 (clang 6): clang "< 9", cmake, clang (12) (le cmake car la détection d'absence de git, qui faisait une simple alerte dans cmake lié à clang 6, fait alerte + core dump sur cmake lié à clang 8).
# Chemin de compilation pour un FreeBSD 10.2 (clang 3.5): clang 3.7.1, clang 3.9.1.
# Chemin de compilation pour un FreeBSD 8 (gcc 4.2): gcc 4.8, clang 3.3 sans lldb, clang 3.4.2 sans lldb #, clang 3.5 en ajoutant --enable-libcpp au configure.
# Chemin de compilation pour un Mac OS X 10.6 (clang 3.5svn): gcc 4.9.2, clang 3.6 sans lldb (et libcxx et libcxxabi sont ignorées) #, clang 3.6.
# Chemin de compilation pour un Mac OS X 10.8 (clang 3.5svn): gcc 4.9.4, clang 3.4.2, clang 3.5.2, clang 3.7.1, clang 3.9.1.
# Attention, quand on a déjà un llvm-3.9.1 d'installé, et qu'on essaie de compiler un llvm+clang 3.9.1, pour je ne sais quelle raison, seul le llvm se compile, argh.

constr=configure
v 3.3 || true
v 3.4.2 && modifs="pasTropOptim macMath stdcppPasTropEnDur sansOcaml" || true # Ne compile pas avec gcc 4.7.4 (même erreur que https://bugs.gentoo.org/show_bug.cgi?id=515882)
v 3.5.0 && modifs="$modifs strtoll" || true # A un petit problème avec strtoll.
v 3.5.2 || true
v 3.6.0 && modifs="$modifs sansCodecvt pathMax ocloexec gccframework complications" && prerequis="swig \\ " || true
v 3.6.2 || true
v 3.7.1 && modifs="pasTropOptim macMath stdcppPasTropEnDur ocloexec alignementBiblios" && prerequis="make python >= 2.7 \\" || true
# build external machin: https://www.bountysource.com/issues/29603185-compiler-rt-is-built-with-the-wrong-toolchain-bootstrap-compiler-rather-than-built-clang-linking-fails-when-using-clang-older-than-3-5-eg-mavericks-and-earlier-xcodes. Ne sera plus valable en 4.0 et suivants.
v 3.9.1 && constr=cmake && modifsDyn="pasTropOptim macMath macLibtool unwind" && modifs="$modifsDyn stdcppPasTropEnDur llvmStrnlen" && prerequis="cmake \\" && OPTIONS_CMAKE="-DLLVM_BUILD_EXTERNAL_COMPILER_RT=ON" || true
v 4.0.0 || true
v 4.0.1 || true
v 5.0.0 || true
v 5.0.1 && modifs="$modifs emmintrim" || true # Tout à la fin, que l'on compile avec un 3.9.1 ou un 4.0.1: make[2]: *** [tools/clang/runtime/CMakeFiles/compiler-rt.dir/build.make:107: tools/clang/runtime/compiler-rt-stamps/compiler-rt-configure] Segmentation fault (core dumped); si on relance, il finit sa compil + install.
v 5.0.2 || true
v 6.0.0 || true
v 6.0.1 && prerequis="python >= 3 cmake \\" || true
v 7.0.1 || true
v 7.1.0 || true
v 8.0.1 || true
v 9.0.1 && modifs="$modifs sansChar8T quandMemeCxxISystem" || true
v 10.0.1 || true
v 11.1.0 && modifs="$modifs maxAlign" || true
v 12.0.0 && modifs="$modifs float16" || true
v 12.0.1 || true
v 13.0.0 || true
v 13.0.1 || true
v 14.0.6 && constr=runtimes && modifs="$modifs sansBenchmarks bibliosTriplet" || true
v 15.0.7 && modifs="$modifs shaxxx cxxabiSansHesitation cxxToutEnUn" || true
v 16.0.6 && remplacerPrerequis "cmake >= 3.20" && retirerModif float16 && modifs="$modifs atomicutmx" || true
v 17.0.1 && modifs="$modifs tailleintsanitizer" && prerequis="python >= 3 cmake >= 3.20 \\" || true
v 17.0.3 || true
v 17.0.6 || true
v 18.1.8 || true
v 19.1.5 || true
v 19.1.6 || true # /!\ Les triplets exotiques marchent-ils encore? https://github.com/llvm/llvm-project/issues/101525
v 19.1.7 || true

lieur()
{
	# Compiler un 12 avec un 8, sur un FreeBSD 11.2 avec le ld par défaut (GNU ld 2.17.50 [FreeBSD] 2007-07-03) pète (à 97%, grrr) sur l'édition de liens. Possibilités à tester:
	# 1. binutils plus récent
	# 2. gold
	# 3. lld (https://wiki.freebsd.org/LLD)
	# À FAIRE: en fait la condition est: si celui par lequel on compile n'est pas celui système.
	pge $version 6 || return 0
	[ `uname` = FreeBSD ] || return 0
	
	local lieur=binutils # Solution 1.
	#lieur="clang+lld < $version"
	
	[ -z "$lieur" ] || prerequis="$lieur \\ $prerequis"
}

lieur

case `basename "$0"` in
	clang)
		argOptions="`options "$argOptions=libcxx=rt"`"
		option libcxx || true
		option rt || true
		;;
esac

archive()
{
	local l="$1" v="$version"
	case "$l" in
		compiler-rt|lldb)
			case "$version" in
				3.4.*) v="`deux() { echo "$1.$2" ; } ; IFS=. ; deux $version`" ;;
			esac
			;;
	esac
suffixe=xz
pge $version 3.5 || suffixe=gz
	case "$version" in
		[0-7].*) echo http://llvm.org/releases/$v/$l-$v.src.tar.$suffixe ;;
		*) echo https://github.com/llvm/llvm-project/releases/download/llvmorg-$v/$l-$v.src.tar.$suffixe ;;
	esac
}

archive="`archive llvm`"
case $constr in runtimes) archive="https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-$version.tar.gz" ;; esac

# Modifs.

atomicutmx()
{
	# Sous FreeBSD (10.2 en tout cas), la fonction atomic_cmpset_acq_long utilisée dans atomic.cpp n'est pas définie dans l'utmx.h inclus mais dans atomic.h.
	if grep -q umtx.h libcxx/src/atomic.cpp && ! grep -q atomic\\.h libcxx/src/atomic.cpp
	then
		cat > /tmp/1.c <<TERMINE
#include <sys/types.h>
#include <errno.h>
#if AVEC_ATO
#include <machine/atomic.h>
#endif
#include <sys/umtx.h>

int main(int argc, char ** argv)
{
	atomic_cmpset_acq_long(0, 0, 0);
}
TERMINE
		if \
			! compilo_test $CC -std=c11 -DAVEC_ATO=0 -o /tmp/1 /tmp/1.c && \
			  compilo_test $CC -std=c11 -DAVEC_ATO=1 -o /tmp/1 /tmp/1.c
		then
			echo "umtx.h nécessite atomic.h, on l'ajoute"
			filtrer libcxx/src/atomic.cpp sed -e '/sys.umtx.h/i\
#include <machine/atomic.h>
'
# A FAIRE: on n'est pas tirés d'affaire. Maintenant à l'install il plante en:
#          /usr/local/binutils-2.41/bin/ld : /usr/local/clang+libcxx-17.0.6/lib/libc++.so : référence indéfinie vers « _umtx_op(void*, int, unsigned long, void*, void*) »
#          sauf qu'il a déjà installé une partie et est donc détecté comme clang (donc utilisé si on tente de recompiler n'importe quoi d'autre avec le compilo le + récent détecté)
#          pourtant un umtx_op est détecté dans /lib/libthr.so et /lib/libpthread.so (mais non nm -o: symboles dézingués), qui est vu par ldd sur /usr/local/clang+libcxx-17.0.6/lib/libc++.so: le symbole y est-il (ms surcharge de lthr par ailleurs?).
		fi
	fi
}

float16()
{
	option rt || return 0

	# https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=268196
	filtrer compiler-rt/lib/builtins/CMakeLists.txt sed \
		-e '/append_list_if(COMPILER_RT_HAS_FLOAT16/d' \
		-e '/add_compiler_rt_runtime(clang_rt.builtins/{
i\
if(NOT (${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD" AND ${arch} STREQUAL "i386"))
i\
append_list_if(COMPILER_RT_HAS_FLOAT16 -DCOMPILER_RT_HAS_FLOAT16 BUILTIN_CFLAGS_${arch})
i\
endif()
}'
	# Et, spécifique à la 15 dans la rustine bugs.freebsd.org ci-dessus, la partie suivante:
	pg 15 $version || filtrer compiler-rt/lib/builtins/CMakeLists.txt awk '
		{print}
		deja>1{next}
		!deja&&/set.i386_SOURCES/{deja=1}
		deja&&/^$/{++deja;print"list(REMOVE_ITEM i386_SOURCES truncdfbf2.c truncsfbf2.c)"}'
}

shaxxx()
{
	# compiler-rt exploite les fonctions sha224, sha256, sha384, sha512). Mais toutes ne sont psa définies sur tous les systèmes.
	# Notamment sha224 qui n'apparaît qu'à partir de FreeBSD 12.
	# FreeBSD 10 n'a même pas les constantes 256, 384 et 512; il a les #include en 256 et 512, et d'autre part les constantes se retrouvent dans openssl/sha.h. Par contre les structures sont bien définies dans les shaxxx.h… mais incompatibles avec celles d'openssl/sha.h, qui lui inclut du 224.
	# Mais attention, pour le 224, sur un FreeBSD moderne (dont on voudrait s'inspirer), OpenSSL et FreeBSD divergent: OpenSSL le greffe à un SHA256_CTX, tandis que FreeBSD lui dédie un SHA224_CTX.
	# Bref le plus simple sera de coder en dut (clang.shamoi.h) les constantes sur lesquelles tout le monde s'accorde; et de faire sauter les #include conflictuels (ceux où on pourrait recourir à OpenSSL sauf qu'il est incompatible avec les longueurs définies côté FreeBSD)..
	
	case `uname` in FreeBSD) true ;; *) return ;; esac
	
	local f n napas
	
	for n in 224 256 384 512
	do
		{ echo "#include <sha$n.h>" ; echo "int main(int argc, char ** argv) { return 0; }" ; } > $TMP/$$/a.c
		if ! compilo_test $CC -o $TMP/$$/a.out $TMP/$$/a.c 2> /dev/null ; then napas="$n $napas" ; fi
	done
	
	for f in \
		compiler-rt/lib/sanitizer_common/sanitizer_platform_limits_freebsd.cpp \
		compiler-rt/lib/sanitizer_common/sanitizer_platform_limits_freebsd.h \
		compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc \
		compiler-rt/lib/sanitizer_common/sanitizer_linux.cpp \
		compiler-rt/lib/profile/InstrProfilingUtil.c
	do
		[ -f "$f" ] || continue
		filtrer "$f" awk "{print}!deja&&/^SHA2/{deja=1;print\"#include \\\"$SCRIPTS/clang.shamoi.h\\\"\"}"
		for n in $napas ; do filtrer "$f" sed -e "/[sS][hH][aA].*$n/d" ; done
		filtrer "$f" sed \
				-e '/PROC_ASLR_STATUS/{
i\
#ifndef PROC_ASLR_STATUS
i\
#define PROC_ASLR_STATUS 14
i\
#endif
}' \
				-e '/PROC_ASLR_ACTIVE/{
i\
#ifndef PROC_ASLR_ACTIVE
i\
#define PROC_ASLR_ACTIVE 0x80000000
i\
#endif
}' \
				-e '/PROC_PDEATHSIG_STATUS/{
i\
#ifndef PROC_PDEATHSIG_STATUS
i\
#define PROC_PDEATHSIG_STATUS 12
i\
#endif
}' \
				-e '/PROC_PDEATHSIG_CTL/{
i\
#ifndef PROC_PDEATHSIG_CTL
i\
#define PROC_PDEATHSIG_CTL 11
i\
#endif
}'
	done
}

tailleintsanitizer()
{
	# Le sanitizer redéfinit des structures équivalentes à celles système.
	# Souci: il n'est adapté qu'à FreeBSD 12, nous on veut pouvoir compiler pour du 11 voire 10.
	# Or l'alignement des données n'est pas le même, ce que fort heureusement nous signale un assert(sizeof(__sanitizer_dirent) <= sizeof(dirent))
	# À FAIRE: aller choper plus finement dans /usr/include/sys/dirent.h
	#          techniquement du #if __FreeBSD_version < 1200000 devrait faire l'affaire
	filtrer compiler-rt/lib/sanitizer_common/sanitizer_platform_limits_freebsd.h awk \
		'/^struct __sanitizer_dirent/{dedans=1}
		#dedans{gsub(/unsigned int/, "u32");gsub(/unsigned short/, "u16")} # Ah non ce n était pas ça finalement.
		dedans&&/d_namlen/{gsub(/u16/,"u8")}
		dedans&&/d_pad/{next}
		/^}/{dedans=0}
		{print}'
}

cxxToutEnUn()
{
	# La libc++ compilée de pair avec une libc++abi (par ex. la 15 chez moi) n'incorpore par les logic_error,
	# tandis qu'une libc++ compilée avec libcxxrt les inclut (la 14 chez moi), sans doute par polyfill de libcxxrt.
	# Les .a sont formels (mais les .so suivent le même modèle, simplement ils n'ont pas le détail des .o):
	#                                [14 ou 15]/libc++abi.a:stdlib_stdexcept.cpp.o: 0000000000000000 T _ZNKSt11logic_error4whatEv
	#                                  /usr/lib/libc++.a:stdexcept.o:               00000000000001f0 T _ZNKSt11logic_error4whatEv
	#   /home/gui/local/clang+libcxx-14.0.6/lib/libc++.a:future.cpp.o:                               U _ZNKSt11logic_error4whatEv
	#   /home/gui/local/clang+libcxx-14.0.6/lib/libc++.a:optional.cpp.o:                             U _ZNKSt11logic_error4whatEv
	#   /home/gui/local/clang+libcxx-14.0.6/lib/libc++.a:stdexcept.cpp.o:           0000000000000000 T _ZNKSt11logic_error4whatEv
	#   /home/gui/local/clang+libcxx-15.0.7/lib/libc++.a:future.cpp.o:                               U _ZNKSt11logic_error4whatEv
	#   /home/gui/local/clang+libcxx-15.0.7/lib/libc++.a:optional.cpp.o:                             U _ZNKSt11logic_error4whatEv
	# Donc la 14 comme la 15 ont embarqué les logic_error dans leur libc++abi, mais *en plus* la 14 l'a copiée dans sa libc++, se prémunissant contre une libcxxrt trop légère.
	# Il en résulte que les programmes qui se lient à libc++ sans lien explicite à libc++abi plantent,
	# ce qui est malheureusement le cas du clang tout juste compilé (tandis que clang++ lui se lie à libc++abi).
	# Deux possibilités:
	# - lier libc++abi.so.1 depuis libc++.so.2.0
	#   - par outil externe: patchelf --add-needed libc++abi.so.1 libc++.so.2.0 # https://stackoverflow.com/a/4241174
	#   - depuis la compil llvm?
	# - embarquer tout libc++abi dans libc++, rendant ainsi libc++ autonome.
	#   Ainsi un "vieux" programme lié à la libc++.so.1 + libcxxrt.so.1 aura sa libc++.so.1 + dépedances résolue (et sa libcxxrt.so.1 inutilisée, sauf par exemple pour CXXRT_1.0; le seul risque étant les alertes "symbole défini à la fois dans libc++.so.1 et libcxxrt.so.1).
	#   Et un nouveau programme ne se liera qu'à libc++.so.1.
	# On part sur la seconde option (car intégrée à llvm).
	
	OPTIONS_CMAKE="$OPTIONS_CMAKE -DLIBCXX_STATICALLY_LINK_ABI_IN_SHARED_LIBRARY=ON"
	
	# Mais ourgh, en 16 en tout cas, au moment du Linking CXX shared library /mnt/bdd/tmp/llvm-project-llvmorg-16.0.6/build/lib/libc++.so, pétage car "/home/gui/local/bin/ld : ne peut trouver -llibcxx-abi-shared-objects"
	# Aucun fichier n'existe sous ce nom.
	# D'après libcxx/cmake/Modules/HandleLibCXXABI.cmake, c'est censé être un alias vers cxxabi_shared_objects mais uniquement "if (TARGET cxxabi_shared_objects)"
	# Dans la compil on a bien d'abord "Built target cxxabi_shared_objects" puis "Consolidate compiler generated dependencies of target cxx_shared" et "Linking CXX shared library …/build/lib/libc++.so"
	# Mais ensuite boum.
	# Bon en tout cas leur -llibcxx-abi-shared-objects est catastrophique: en collant -lc++abi, à défaut d'embarquer les .o constituant libc++abi.a, il se lie à la .so tout juste compilée:
	# c'est équivalent à ce que nous fait patchelf, adjugé!
	# (ça devient alors étrangement semblable à la ligne du dessous, du if (!LIBCXX_STATICALLY_LINK_ABI_IN_SHARED_LIBRARY), mais bon)
	filtrer $projects/libcxx/src/CMakeLists.txt sed -e 's#libcxx-abi-shared-objects#c++abi#g'
	
	# Mais ça ne suffit pas: il nous faut tout de même stdcppPasTropEnDur() qui ajoute -lc++abi à chaque -lc++,
	# car notamment GNU ld sort en "erreur lors de l'ajout de symboles : DSO manquant dans la ligne de commande":
	# il ne suffit pas de lier libc++ à libc++abi dans libc++.so, GNU ld *veut* qu'on mentionne le -lc++abi sur la ligne.
	# Tout repose donc sur la propension du pilote à invoquer ld avec les paramètres complets.
}

bibliosTriplet()
{
	# À partir de la 14, libc++abi installe ses biblios non dans lib, mais dans lib/<triplet>, sans lien symbolique.
	# Résultat, tout programme qui se compile en -lc++ plante à l'exécution, ne trouvant pas libc++abi dont dépend libc++.
	# https://discourse.llvm.org/t/is-it-possible-to-disable-the-triple-that-llvm-15-added-to-the-libc-abi-library-path/68704
	
	for f in $racineLlvm/CMakeLists.txt $racineLlvm/runtimes/CMakeLists.txt
	do
		# Parfois ils passent par une LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default, parfois en codant en dur un ON.
		# On gère les deux.
		filtrer "$f" sed \
			-e '/LLVM_ENABLE_PER_TARGET_RUNTIME_DIR.*ON/s/ON/OFF/g'
	done
	
	# La version suivante serait la version modifsPostInstall:
	true ||
	(
		triplet="`$dest/bin/llvm-config --host-target`"
		cd "$dest/lib" && [ -d "$triplet" ] || exit 0
		ln -s "$triplet"/* ./
	)
}

cxxabiSansHesitation()
{
	# À FAIRE: le faire en fonction de la biblio ABI choisie pour compiler ce compilo (et sa libc++).
	# Ici on a codé en dur l'inclusion de cette modif à partir de la 15, car on suppose notre 14 compilé encore avec une libc++ + libcxxrt. C'est fragile.
	
	# Une 15.0.7 compilée par une 14.0.6 finit avec un lib/<triplet>/libc++.so contenant:
	# INPUT(libc++.so.1 -l)
	# non fonctionnel ("-/home/gui/local/bin/ld : ne peut trouver l", c'est ClangLinkerWrapper.cpp" qui le dit)
	# tandis que la 14.0.6 (elle-même compilée par une 13.0.1, en constr non runtimes) contient:
	# INPUT(libc++.so.1 -lcxxrt)
	# On trouve une /lib/libcxxrt.so, d'après la doc [https://clang.llvm.org/docs/Toolchain.html#c-abi-library] il s'agit d'une implémentation tierce (utilisée comme on le constate par les clang++ première génération).
	# Si on tente de l'utiliser dans notre clang++ 15, ça pète, car notre libc++ a été compilée avec une libc++abi bien plus moderne, donc on se tape une vingtaine de "référence indéfinie vers « vtable for std::logic_error »" ou consortes.
	# En remettant un -lc++abi, hop, ça passe.
	# Où est le problème à la source?
	# libcxx/src/CMakeLists.txt fait un:
	#   set(linker_script "INPUT($<TARGET_SONAME_FILE_NAME:cxx_shared> ${link_libraries})")
	# lui-même alimenté par un imported_libname ?? output_name, rempli par:
	#   set(imported_libname "$<TARGET_PROPERTY:libcxx-abi-shared,IMPORTED_LIBNAME>")
	#   set(output_name "$<TARGET_PROPERTY:libcxx-abi-shared,OUTPUT_NAME>")
	# Or CMake ne gère pas…
	#   https://discourse.llvm.org/t/15-0-0-rc1-has-been-tagged/64174/7
	#   https://gitlab.kitware.com/cmake/cmake/-/issues/21045 (toujours pas résolu 1 an après).
	# A priori c'est surtout un souci d'œuf et de poule, puisque même en remplaçant l'IF par ${output_name} ou $<TARGET_PROPERTY:libcxx-abi-shared,OUTPUT_NAME> on finit en -l
	# (libcxx-abi-shared, défini dans libcxx/cmake/Modules/HandleLibCXXABI.cmake, ne semble pas encore là quand il est utilisé; pourtant notre plantage intervient juste après le [100%] Built target cxx_shared, lui-m̂ après [ 89%] Built target cxxabi_shared).
	# Mais nous on sait qu'on veut la version qu'on vient de compiler, donc on fait sauter l'IF et on code tout en dur:
	filtrer $projects/libcxx/src/CMakeLists.txt sed \
		-e 's#\$<IF:\$<BOOL:\${imported_libname}>,\${imported_libname},\${output_name}>#c++abi#'
}

maxAlign()
{
	option libcxx || return 0
	
	# À partir de la 11, max_align_t n'est plus définie dans libcxx, qui repose intégralement sur la définition C système.
	# La partie C (clang) a son propre __stddef_max_align_t.h interne, mais libc++ le contourne soigneusement pour taper directement /usr/include.
	# Sauf que ce max_align_t n'a été défini sous FreeBSD qu'en 10.4:
	# - https://www.freebsd.org/releases/10.4R/relnotes/
	# - https://svnweb.freebsd.org/base?view=revision&revision=309258
	# - https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=210890
	# - https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=193594
	# Donc un FreeBSD antérieur avec une libc++ postérieure perd les pédales.
	# Or les versions suivantes de C++ en ont besoin inconditionnellement (ex. en C++17: https://man.freebsd.org/cgi/man.cgi?query=gcc10&apropos=0&sektion=0&manpath=FreeBSD+12.2-RELEASE+and+Ports&arch=default&format=html)
	# Cf. aussi using_if_exists dans https://www.mail-archive.com/search?l=bug-gnulib@gnu.org&q=subject:%22no%5C-c%5C%2B%5C%2B%22&o=newest&f=1 (qui dit que 12 et 13 étaient d'une façon)
	# et https://reviews.llvm.org/D131425?id=476753
	for f in $projects/libcxx/include/cstddef $projects/libcxx/include/stddef.h
	do
		filtrer "$f" awk '{print}/#include.*stddef.h/{print"#ifndef __GCC_MAX_ALIGN_T";system("cat '"$tools"'/clang/lib/Headers/__stddef_max_align_t.h");print"#endif"}'
	done
}

pasTropOptim()
{
	# Certains vieux BSD ont un clang++ qui plante en -O3
	case "`command -v "$CXX" 2> /dev/null || true`" in
		"$INSTALLS"/*) return ;; # Si c'est un à nous on l'estime bien compilé.
	esac
	case "`uname`" in
		FreeBSD) true ;;
		*) return ;;
	esac
	export CXXFLAGS="`printf %s "$CXXFLAGS" | sed -e 's/-O3/-O1/g'`"
	export CFLAGS="`printf %s "$CFLAGS" | sed -e 's/-O3/-O1/g'`"
	livrable=Debug
}

trouverBiblio()
{
	local d s chem="$LD_LIBRARY_PATH:/usr/lib64:/usr/lib" # On code en dur ces chemins, que tous les compilos intègrent même si les GuiLI, stricts, l'ont exclus.
	IFS=:
	for d in $chem
	do
		for s in .so .dylib
		do
			[ -e "$d/$1$s" ] && echo "$d/$1$s" && break || true
		done
	done
	unset IFS
}

sansBenchmarks()
{
	# https://github.com/llvm/llvm-project/issues/54941
	filtrer $racineLlvm/CMakeLists.txt sed \
		-e '/option.LLVM_INCLUDE_BENCHMARKS/s/ON/OFF/' \
		-e '/option.LLVM_INCLUDE_TESTS/s/ON/OFF/'
	if option libcxx
	then
		filtrer $projects/libcxx/CMakeLists.txt sed \
			-e '/option.LIBCXX_INCLUDE_BENCHMARKS/s/ON/OFF/'
	fi
}

quandMemeCxxISystem()
{
	# À FAIRE: une détection plus fine. En fait le critère est "si le compilo utilisé pour compiler notre compilo, a lui-même été compilé avec stdcppPasTropEnDur(), alors pas besoin de quandMemeCxxISystem()".
	#          on pourrait le détecter en tentant de compiler un .cxx avec un #include <stdlib>, reste à savoir ce qu'il faut comme main() pour déclencher le pétage (et ne pas le déclencher à tort: tester une fonction C++20 si l'on compile un clang 8 est mettre la barre un peu trop haut, sans espoir de résultat).
	pg 15 $version || return 0
	
	# Dans compilo_cheminLibcxxClang(), on a exclu clang du -cxx-isystem, censé ne pas servir à grand-chose
	# puisque 1. clang est compilé avec le précédent clang censé savoir fouiller dans ses propres en-têtes
	# et 2. on se dit que ça ne sert pas à grand-chose, si celui en train d'être compilé (mettons un 9) fait un #include_next, le #ifndef _STDTRUC_INCLUDED_ du 8 après le #define _STDTRUC_INCLUDED_ du 9 fera que rien du .h du 8 ne sera de toute façon exploité.
	# … Mais en vrai certains fichiers ne compilent pas ainsi (la stdlib d'/usr/include est trop ancienne).
	# Pour eux on doit donc restaurer le -cxx-isystem
	# (mais pas pour tout le monde: les couches basses (LLVM) se vautrent à 10% de la compil si elles ont du -cxx-isystem, tandis que notre clangFormat est aux 87%)
	
	modifsPostConf="$modifsPostConf _quandMemeCxxISystem"
	_quandMemeCxxISystem()
	{
		for f in \
			tools/clang/lib/Format/CMakeFiles/obj.clangFormat.dir/flags.make \
			tools/clang/tools/libclang/CMakeFiles/libclang.dir/flags.make \
			tools/clang/utils/TableGen/CMakeFiles/obj.clang-tblgen.dir/flags.make \
			tools/llvm-profdata/CMakeFiles/llvm-profdata.dir/flags.make
		do
			filtrer "$f" sed -e "s#-std=c++#-cxx-isystem $LIBCXX_INCLUDES -cxx-isystem /usr/include &#"
		done
	}
}

sansChar8T()
{
	# https://github.com/llvm/llvm-project/issues/42070
	# https://github.com/llvm/llvm-project/issues/43094
	# libc++abi s'attend à pouvoir exporter des symboles char8_t (introduction récente de C++), suivant un mécanisme assez complexe (libc++abi exporte les symboles de libc++?);
	# sauf que quand il se compile la première fois, libc++ n'est pas encore compilée, et donc il repose sur la libc++ système… qui est trop vieille pour contenir du char8_t!
	# Pour pallier on effectue donc plusieurs compils (d'abord libc++abi sans char8_t liée à la libc++ système, puis on recompile le tout avec le clang++ tout juste compilé et oh miracle les symboles apparaissent!)
	
	# Détection de ce qui est disponible.
	# echo "int main(int argc, char ** argv) { char8_t c = 0; return 0; }" > /tmp/1.cpp ; compilable_cxx -c /tmp/1.cpp
	# Mais apparemment ne marche pas: même sur un clang++ qui marchait ça ne donne rien.
	# Le plus fiable reste d'aller egreper l'expression sur nm -o libc++abi.so/.dylib.
	local libcxxabi="`trouverBiblio libc++abi`"
	if [ -z "$libcxxabi" ] || egrep -q '_ZT[IS]P?K?Du' < "$libcxxabi" ; then return ; fi
	
	# On tente du similaire à https://askcodez.com/comment-construire-libcxx-et-libcxxabi-par-clang-sur-centos-7.html
	
	gris "La libc++abi de départ ne connaît pas char8_t. Première passe en mode dégradé, puis on recompilera." >&2
	
	cp $projects/libcxxabi/lib/itanium-base.exp $projects/libcxxabi/lib/itanium-base-v2.exp
	filtrer $projects/libcxxabi/lib/itanium-base.exp egrep -v '_ZT[IS]P?K?Du'
	
	modifsPostCompil="$modifsPostCompil _sansChar8T"
	_sansChar8T()
	{
		cp ../$projects/libcxxabi/lib/itanium-base-v2.exp ../$projects/libcxxabi/lib/itanium-base.exp
		touch ../$projects/libcxxabi/src/*.cpp
		grep -rl /bin/clang $projects/libcxxabi | while read f ; do filtrer "$f" sed -e "s#[-+_/.a-zA-Z0-9]*/bin/clang#`pwd`/bin/clang#g" ; done
		make -j4
	}
}

# (utilisée avec multiarch())
# Sur les systèmes multi-architectures (ex.: Mac OS X), clang détermine pour quelles architectures se compiler en fonction des archis supportées par le ld système; mais libc++ ne se compile par défaut que pour l'architecture par défaut. Et comme clang est écrit en C++, il requiert libc++. Autrement dit, un llvm + clang + libc++ compilé avec le clang système (multi-arch) et les options par défaut sera incapable de compiler un nouveau llvm + clang.
multiarchConfigurer()
{
	case "$multiarch_arch" in
		i386) OPTIONS_CMAKE="$OPTIONS_CMAKE -DLIBCXX_BUILD_32_BITS=ON" ;; # Pas besoin de LLVM_BUILD_32_BITS=ON pour les binaires, seule libc++ nous intéresse.
	esac
}

emmintrim()
{
	# Pourquoi ne trouve-t-il pas l'emmmintrim.h qui est pourtant embarqué à la fois dans le source, et dans les clang précédemment installés? Bon, on l'aide.
	# Cependant on ne peut inclure celui du source, sous peine d'incompatibilité 
	
	#export CPPFLAGS="$CPPFLAGS -I`pwd`/tools/clang/lib/Headers"
	
	true
}

unwind()
{
	# En compil LLVM seul, pas besoin.
	
	[ -d $projects/libcxxabi/src ] || return 0
	
	# Si le système n'a pas d'unwind.h (ex.: FreeBSD 10.2), il nous faut au moins une déclaration générique pour qu'il compile.
	# http://lists.llvm.org/pipermail/llvm-dev/2015-November/092336.html
	# http://clang-developers.42468.n3.nabble.com/libcxxabi-Which-unwind-h-td3230734.html
	
	# Si possible on repose sur l'unwind.h système. Et d'ailleurs s'il existe on ne le surcharge surtout pas, sous peine de finir avec des incompatibilités d'#include_next.
	echo '#include <unwind.h>' > /tmp/1.c
	$CC -c -o /tmp/1.o /tmp/1.c && return 0 || echo "unwind.h introuvable, récupération d'un unwind.h générique" >&2
	
	cp $tools/clang/lib/Headers/unwind.h $projects/libcxxabi/src/
	# S'agit-il bien de http://download.savannah.nongnu.org/releases/libunwind/ comme indiqué dans la précédente URL "which unwind"?
}

sansOcaml()
{
	# Ocaml en 3.4.2 se compile, embarque dans clang des symboles liés à ocaml, puis n'arrive pas à embarquer la biblio qui va bien pour ces symboles. Ne cherchons pas, dégommons.
	filtrer configure sed -e '/BINDINGS_TO_BUILD/{
s/ocaml/pasocaml/g
s/pasocaml)/ocaml)/g
s/pasocaml/ /g
}'
}

strtoll()
{
	# Sous FreeBSD 8.2, strtoull est déclarée dans stdlib.h (qu'on ne peut inclure, car durant la compil c'est celui interne qui surcharge), et définie dans libc (ce qui n'est pas détecté, donc on se raccroche à une biblio qu'on sait ajoutée par le configure).
	filtrer configure sed -e 's/"-lz/"-lc -lz/'
	for i in lib/TableGen/TGLexer.cpp utils/unittest/googletest/src/gtest-internal-inl.h
	do
		[ -e "$i" ] && filtrer "$i" sed -e '/namespace/i\
extern "C" { long long strtoll(const char * nptr, char ** endptr, int base); unsigned long long strtoull(const char * nptr, char ** endptr, int base); }
' || true
	done
}

stdcppPasTropEnDur()
{
	# clang code en dur les chemins dans lesquels il cherche ses include système pour lib(std)c++ (cf. lib/Driver/ToolChains.cpp).
	
	# >= 14
	# Chacun fait à sa sauce, cf. InitHeaderSearch.cpp:AddDefaultIncludePaths() (qui centralisait): "This code path is going away."
	# Donc on va regarder les clang/lib/Driver/ToolChains/*.cpp:
	# - Gnu.cpp a bien un AddIncludePath(getDriver().Dir + "/../include") (sauf si getTriple().isAndroid())
	#   À FAIRE: Euh, mais il lui manque c++/v1, non?
	# - Darwin.cpp a aussi un llvm::sys::path::append(InstallBin, "..", "include", "c++", "v1");
	# - reste juste FreeBSD.cpp qui code en dur un getDriver().SysRoot, "/usr/include/c++/v1"
	if [ -e $tools/clang/lib/Driver/ToolChains/FreeBSD.cpp ]
	then
		# À FAIRE: getDriver().getInstalledDir() ou bien $dest?
		local siegePilote=Dir
		pge $version 19 || siegePilote="getInstalledDir()" # Classique avant la 19. En 19 tous les "push_back(getInstalledDir()); if(getInstalledDir() != Dir) push_back(Dir);" sont devenus simplement "push_back(Dir);".
		filtrer $tools/clang/lib/Driver/ToolChains/FreeBSD.cpp awk '
# On remplace l /usr/include/c++/v1 par le nôtre, plutôt que de nous y accoler: le jeu des include_next déteste avoir deux c++/v1.
/usr.include.c...v[0-9]/{sub(/[^,]*SysRoot.*;/, "std::string(getDriver().'"$siegePilote"') + \"/../include/c++/v1\");")}
{print}
# Notre lib s insère avant celle codée en dur dans le constructeur.
/FreeBSD::FreeBSD/{constr=1}
constr&&/{/{constr="";print "getFilePaths().push_back(std::string(getDriver().'"$siegePilote"') + \"/../lib\");"}
# Et notre libc++ ne sait pas marcher sans sa libc++abi.
/"-lc\+\+"/{print"CmdArgs.push_back(\"-lc++abi\");"}
'
		filtrer $tools/clang/lib/Driver/ToolChain.cpp awk '
{print}
/"-lc\+\+"/{print"CmdArgs.push_back(\"-lc++abi\");"}
'
	fi
	
	# À FAIRE: faire le pont entre les deux (le bloc du dessus et du dessous).
	# Au-dessus, on se cale sur le …/bin/../include/c++/v1 (permet de déplacer le dossier d'install).
	# En dessous,
	#   d'une part on code en dur un /usr/local/include/c++/v1 depuis le SYSROOT pour les FreeBSD (ou les GuiLI mais en ayant codé en dur l'$INSTALLS),
	#   d'un autre côté on a une version relative en …/lib/../include/c++/vx mais uniquement pour gcc
	# Il faudrait combiner le meilleur des deux pour savoir s'adapter à toutes les situations (FreeBSD dans leur jus, gcc, GuiLI).
	
	# < 14 (voire avant?)
	if [ -e $tools/clang/lib/Driver/ToolChains.cpp ]
	then
	patch -p0 <<TERMINE
--- ./tools/clang/lib/Driver/ToolChains.cpp	2014-12-15 19:36:49.000000000 +0100
+++ ./tools/clang/lib/Driver/ToolChains.cpp	2014-12-15 19:49:40.000000000 +0100
@@ -2560,10 +2560,23 @@
 
   switch (GetCXXStdlibType(DriverArgs)) {
   case ToolChain::CST_Libcxx:
+			addSystemInclude(DriverArgs, CC1Args, getDriver().SysRoot+"/usr/local/include/c++/v1");
     addSystemInclude(DriverArgs, CC1Args,
                      getDriver().SysRoot + "/usr/include/c++/v1");
     break;
   case ToolChain::CST_Libstdcxx:
+			if(GCCInstallation.isValid())
+			{
+				StringRef LibDir = GCCInstallation.getParentLibPath();
+				//const Multilib &Multilib = GCCInstallation.getMultilib();
+				//const std::string GCCMultiarchTriple = getMultiarchTriple(GCCInstallation.getTriple(), getDriver().SysRoot);
+				//const std::string TargetMultiarchTriple = getMultiarchTriple(getTriple(), getDriver().SysRoot);
+				//StringRef TripleStr = GCCInstallation.getTriple().str();
+				const GCCVersion &Version = GCCInstallation.getVersion();
+				
+				addSystemInclude(DriverArgs, CC1Args, LibDir.str()+"/../include/c++/"+Version.Text);
+				return;
+			}
     addSystemInclude(DriverArgs, CC1Args,
                      getDriver().SysRoot + "/usr/include/c++/4.2");
     addSystemInclude(DriverArgs, CC1Args,
TERMINE
	fi
}

sansCodecvt()
{
	# La compil présume la présence d'un Mac OS X un peu trop récent, même sur de vieux OS.
	filtrer tools/lldb/include/lldb/Host/Editline.h sed -e '/include.*codecvt/d' -e 's/define LLDB_EDITLINE_USE_WCHAR 1/define LLDB_EDITLINE_USE_WCHAR 0/'
}

pathMax()
{
	filtrer tools/lldb/source/Host/common/FileSpec.cpp sed -e "`grep -n '#include' < tools/lldb/source/Host/common/FileSpec.cpp | tail -1 | cut -d : -f 1`{"'
a\
#if !defined(PATH_MAX)
a\
#define PATH_MAX 1024
a\
#endif
}'
}

alignementBiblios()
{
	# http://clang-developers.42468.n3.nabble.com/libc-std-cout-alignment-trouble-was-Re-llvm-r240144-SLP-Vectorize-for-all-constant-entries-td4047983.html et https://reviews.llvm.org/D16145: on pète le cout, du coup ce clang crée des libcxx (par exemple si on l'utilise pour compiler une 3.9.1) qui ne peuvent être liées avec rien sans générer du SIGBUS sur déclaration de cout.
	cat "`obtenir 'https://reviews.llvm.org/file/data/o6gjjjurg5id7u7xz5n4/PHID-FILE-k3st7u3bca6bv7ro75sm/D16145.diff' llvm.d16145.diff`" | patch -l -p2 || true
}

ocloexec()
{
	grep -rq O_CLOEXEC /usr/include 2> /dev/null || filtrer tools/lldb/source/Host/posix/PipePosix.cpp sed -e 's/O_CLOEXEC/0/g'
}

gccframework()
{
	# Si l'on compile mettons un LLVM 3.6 sur un Mac OS X 10.6 sur lequel on a recompilé un GCC 4.9, LLVM ayant quelques spécificités pour Mac du genre se lier à CoreFoundation, et GCC n'ayant pas de chemin de framework par défaut, il va falloir indiquer à ce dernier ce que le (llvm-)gcc livré par Apple fait en standard.
	CPPFLAGS="$CPPFLAGS -F/Developer/SDKs/MacOSX10.6.sdk/System/Library/Frameworks"
	LDFLAGS="$LDFLAGS -F/Developer/SDKs/MacOSX10.6.sdk/System/Library/Frameworks"
	export CPPFLAGS LDFLAGS
}

complications()
{
	# LLVM_HAS_VARIADIC_TEMPLATES est utilisé si l'on compile avec un LLVM récent. Sur nos installs qui compilent avec un GCC 4.9, ça devrait pouvoir passer aussi. Et l'alternative figurant dans le code source est un truc hyper complexe utilisant des constructions qui paraissent invalides, donc mieux vaut essayer de faire propre. On considère qu'on est toujours en LLVM_HAS_VARIADIC_TEMPLATES.
	# Cf. aussi http://llvm.org/viewvc/llvm-project?view=revision&revision=229324
	# Note: ceci n'est peut-être plus nécessaire maintenant que l'on a un GCC avec https://github.com/gcc-mirror/gcc/commit/96d7f12983e561307f222a6d75627a3d7298ab35
	filtrer include/llvm/ADT/SmallVector.h sed -e 's/LLVM_HAS_VARIADIC_TEMPLATES/1/g'
	
	# Bon alors là ça ne passe pas. Les Blocks, côté GCC, bof bof. On préfère laisser de côté lldb pour le moment, et revenir le compiler une fois qu'on aura un clang fonctionnel.
	#filtrer tools/lldb/source/Host/macosx/Host.mm sed -e 's/_handler (source, ^{/_handler_f (source, [](dispatch_source_t source){/'
}

# Version de la biblio libc++,
# à choisir en fonction de pas mal de paramètres
# surtout si on lui greffe une libc++abi sur des systèmes habitués à une libc++ + libcxxrt
vblibcxx()
{
	# On utilise une numérotation de biblio différente de celle préconisée:
	# Sur nos systèmes (FreeBSD 10), qui sont du libc++ + libcxxrt en guise d'ABI, /usr/lib/libc++.so.1 est cette "vieille" libc++ liée à libcxxrt, à laquelle TOUS les logiciels C++ compilés se sont liés en même temps qu'à libcxxrt.so.1. Si l'on remplace libc++.so.1 par la nôtre, ces logiciels explosent, car notre "nouvelle" libc++ repose sur des fonctionnalités de libc++abi que n'a pas libcxxrt; à commencer par cmake, qui pète non pas après l'installation, mais dans la compilation même, puisque le make général réinvoque un cmake.
	
	local cheminsys="/usr/bin:/bin"
	[ "$INSTALLS" = /usr/local ] || cheminsys=/usr/local/bin:$cheminsys
	local vclangsys="`PATH=$cheminsys ; clang -dumpversion`"
	[ -n "$vclangsys" ] || return 0 # À FAIRE: vérifier cette assertion (pas de clang = pas de conflit donc on peut rester en ABI v1).
	
	# Mettons arbitrairement que c'est à partir des clang 10 que FreeBSD se lie à une libc++.
	case `uname` in
		FreeBSD)
			pge $vclangsys 10 || pg 10 $version || babi="$babi cohabitCxxrt"
			;;
	esac
	pge $vclangsys 17 || pg 17 $version || babi="$babi grow_by"
	
	case "$babi" in "") return ;; esac
	
	# Gestion des BABI (Breaks of ABI):
	# Pour chaque changement qui fait qu'une libc++.so ne peut pas remplacer la précédente de façon transparente, on incrémente la version de biblio pour les distinguer.
	# Normalement ça devrait être géré par le projet LLVM mais il y a des ratés…
	# Liste des BABI:
	# - cohabitCxxrt
	#   Cf. gros commentaire plus haut.
	# - grow_by
	#   En 17, __grow_by est remplacée par __grow_by_without_replace.
	#   En conséquence les logiciels compilés avec une libc++ 16 cherchent un __grow_by et ne le trouvent plus (notamment clang++17 lui-même)
	#   Changement apparu dans https://reviews.llvm.org/D148693; philnik dit que "The inline version should always be emitted" (donc qu'on ne devrait pas trouver de symbole __grow_by dans le généré), mais peut-être n'était-on pas encore en always inline en 16 (grâce à laquelle notre clang++17 a été compilé).
	#   Une autre explication serait que les .h font tout pour que __grow_by reste privée, mais avec une exception pour clang lui-même (ce qui expliquerait son apparition dans les symboles U de clang++).
	#   Ou alors que __grow_by n'était actif qu'en mode expérimental, n'est normalement pas utilisé (sauf si on l'active explicitement à nos risques et périls)… mais que cohabitCxxrt aurait déclenché son activation (en déclarant un LIBCXX_ABI_VERSION=2, signe du mode expérimental).
	
	# À FAIRE: partir de la version indiquée comme défaut dans les fichiers livrés.
	local v=1 b
	for b in $babi ; do v=$((v+1)) ; done
	
	OPTIONS_CMAKE="$OPTIONS_CMAKE -DLIBCXX_LIBRARY_VERSION=$v.0"
	# /!\ Jouer sur LIBCXX_ABI_VERSION n'est peut-être pas une bonne idée.
	#     La biblio demande alors une recompil de tous les logiciels, puisque les symboles changent: _ZNKSt3__14__fs10filesystem4path10__filenameEv devient _ZNKSt3__24__fs10filesystem4path10__filenameEv, etc. (pour prendre l'exemple d'un symbole défini dans libc++abi.so.1 mais pas dans libcxxrt.so.1).
	#     À voir: le gain (d'éviter les incompatibilités en créant deux versions des mêmes symboles, ce qui permet "par mégarde" d'embarquer conjointement une libc++.so.1 et une libc++.so.2) en vaut-il la chandelle?
	OPTIONS_CMAKE="$OPTIONS_CMAKE -DLIBCXX_ABI_VERSION=$v"
	OPTIONS_CMAKE="$OPTIONS_CMAKE -DLIBCXXABI_LIBRARY_VERSION=$v.0"
}

# Préconsommons les options qui seront traitées plus tard, pour éviter que destiner ne nous enguirlande.
option dyn || true
case $constr in
	runtimes)
		! option lldb || PROJETS="$PROJETS,lldb"
		! option lld || PROJETS="$PROJETS,lld"
		;;
esac

destiner

prerequis

manuel=non ; for param in "$@" ; do [ "x$param" = x--manuel ] && manuel=oui ; done
if [ $manuel = oui ]
then
	echo "# VOUS ÊTES DANS UN TERMINAL: À VOUS DE JOUER"\! >&2
	#cd $TMP/llvm-$version.src
	cd $TMP/llvm-project-llvmorg-$version/
	for modif in true $modifsDyn ; do $modif ; done
	[ -d bouild ] && cd bouild || true
	[ -d build ] && cd build || true
	bash
else

pg 3.9.1 $version || multiarch

# Sur la 14, les extensions CMake sont livrées à côté du source. obtenirEtAllerDans() ne rentre donc pas dans le source, mais se place à côté des deux.
# (et à partir de la 15 on revient à juste un src dans l'archive (les cmake communs deviennent un projet à part))
src() { [ -d "$1"-*.src ] || { echo . ; return ; } ; echo "$1"-*.src ; }

obtenirSauf=test
obtenirEtAllerDansVersion
cd "`src llvm`"
case "$constr" in
	runtimes)
		projects=.
		tools=.
		racineLlvm=llvm
		;;
	*)
		projects=projects
		tools=tools
		racineLlvm=.
		;;
esac

integrer()
{
	local dest="$1" module="$2" src="`basename "$1"`" lien=
	case "$module" in "") module="$src" ;; esac
	case $constr in runtimes) lien="$dest" ; dest="$src" ;; esac
	
	ici="`pwd`"
	# Pour que toutes nos modifs (habituées à travailler sur projects/xxx plutôt que xxx) fonctionnent encore, on crée un lien symbolique projects/xxx -> ../xxx:
	[ -z "$lien" -o -L "$lien" ] || { mkdir -p "`dirname "$lien"`" ; ln -s "$ici/$dest" "$lien" ; }
	
	(
		obtenirEtAllerDans "`archive "$module"`" || exit 1
		src="/`src "$src"`" ; case "$src" in /.) src= ;; esac
		rm -Rf "$ici/$dest"
		mv "`pwd`$src" "$ici/$dest"
		# Pour la 14, cf. commentaire de src().
	)
}
if [ "`basename "$0"`" = clang -a $constr != runtimes ] ; then
modulesClang()
{
	pg 15 $version || integrer cmake
	local moduleClang=clang
	pge $version 9 || moduleClang=cfe
	integrer tools/clang          $moduleClang
	! option rt || integrer projects/compiler-rt compiler-rt
	if option libcxx
	then
integrer projects/libcxx      libcxx
! pge $version 3.5 || integrer projects/libcxxabi libcxxabi
	fi
# lldb doit être compilé à part, car il requiert libc++ qui elle-même ne peut être compilé qu'après le compilo.
# Pose problème sur Mac en 3.6 tant que l'on n'a pas un premier clang (utilise des trucs absolument tordus).
	if option lldb ; then integrer tools/lldb lldb ; fi
	if option lld ; then integrer tools/lld lld ; fi
	# À FAIRE: integrer libunwind? C'est un projet LLVM?
}
modulesClang
fi

livrable=Release

echo Correction… >&2
for modif in true $modifs ; do $modif ; done

echo Configuration… >&2
# Souci sous FreeBSD 8: en créant un clang via gcc, le clang généré est incapable de créer un nouveau clang (>= 3.5) car il est fait appel à <cmath>; et pour celui-ci, soit on utilise les en-têtes clang (mais alors ils déclarent std::log2 comme un appel à log2, qui est déclarée en #if 0 dans le math.h de FreeBSD 8), soit on prend ceux de GCC (qui utilisent un __builtin_log2, embarqué par GCC, mais les include comportent des directives non reconnues de clang). Le clang généré arrive par contre à se lier à la libstdc++, si l'on avait les bons .h on pourrait faire quelque chose (un .c compilé en clang -o 1 -lstdc++ 1.c est capable d'utiliser coshl pourvu qu'on la lui ait définie en haut, sans inclusion).
#pge $version 3.5 && OPTIONS_CONF="$OPTIONS_CONF --enable-libcpp" && CXX="clang -stdlib=libc++" && export CXX || true
false && pge $version 3.5 && CC=gcc && CXX=g++ && export CC CXX || true
case $constr in
	cmake|runtimes)
		mkdir -p build
		cd build
		# -DBUILD_SHARED_LIBS=ON: bof, ça triple le temps d'exécution par rapport au clang système (sur un petit .cxx: g++ 11 0,5 s; /usr/bin/clang++ 0,6 s; clang++ divers sans -O3 1,6 à 2 s; clang++ 13 avec -O3 0,7 s).
		# https://reviews.llvm.org/D61804
		option dyn && OPTIONS_CMAKE="$OPTIONS_CMAKE -DBUILD_SHARED_LIBS=ON" || true
		case $constr in
			cmake) racineCompil=.. ;;
			runtimes)
				racineCompil=../llvm
		case "$0" in
			*clang)
				PROJETS="$PROJETS,clang"
				if option libcxx
				then
							# compiler-rt: https://github.com/llvm/llvm-project/issues/57104#issuecomment-1335572477 + sans ça pas de libclang_rt.profile-x86_64.a indispensable au -fprofile-instr-generate qui permet (par ex. à Python) de se générer avec les stats de perfs.
					OPTIONS_CMAKE="$OPTIONS_CMAKE -DLLVM_ENABLE_RUNTIMES=libcxx;libcxxabi"
					! option rt || OPTIONS_CMAKE="$OPTIONS_CMAKE;compiler-rt"
					! option rt || pg 18 $version || OPTIONS_CMAKE="$OPTIONS_CMAKE;libunwind" # À partir de https://reviews.llvm.org/D150897 compiler-rt utilise par défaut la libunwind embarquée (plutôt que celle système) et donc a besoin qu'on la rajoute aux projets à compiler.
					# Bon pas si simple:
					# Compiler doesn't support generation of unwind tables if exception support is disabled.  Building libunwind DSO with runtime dependency on C++ ABI library is not supported. [/home/gui/tmp/llvm-project-llvmorg-18.1.8/libunwind/src/CMakeLists.txt:102]
					# Comment on lui colle support de l'exception?
					# Cf. Google sur clang runtime-rt libunwind exception support
					# - https://github.com/llvm/llvm-project/issues/29055 laisse entendre que mieux vaut retourner à l'anc. façon de faire?
					# - https://clang.llvm.org/docs/Toolchain.html montre bien qu'on a d'un côté les ABI de l'autre le reste
					# https://stackoverflow.com/questions/4080601/not-using-c-exceptions-by-design-in-llvm-clang
					# https://llvm.org/docs/CMake.html LLVM_ENABLE_EH
					# Changement en https://reviews.llvm.org/D68855
					# Mais on se rend cpte que dans notre 18 (qui n'a même pas encore le LIBUNWIND_HAS_NO_EXCEPTIONS_FLAG), est utilisé un CXX_SUPPORTS_FNO_EXCEPTIONS_FLAG qui n'est défini nulle part???
					# Ah purée le connard en scrutant build/runtimes/runtimes-X86-bins/CMakeFiles/CMakeConfigureLog.yaml (grep -rl) on finit par dénicher un "error: unknown target triple 'X86'"
					# Ah compris c'est mon BUILD_TARGETS=X86
					# Et si on compile sans l'option rt:
					# "LIBCXXABI_USE_LLVM_UNWINDER is set to ON, but libunwind is not specified in LLVM_ENABLE_RUNTIMES."
					if pge $version 18
					then
						if option rt
						then
							OPTIONS_CMAKE="$OPTIONS_CMAKE -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_EH=ON -DLIBCXXABI_ENABLE_EXCEPTIONS=ON"
						fi
					fi
					OPTIONS_CMAKE="$OPTIONS_CMAKE -DCLANG_DEFAULT_CXX_STDLIB=libc++"
							#OPTIONS_CMAKE="$OPTIONS_CMAKE -DLIBCXX_CXX_ABI=libcxxabi"
							
					# Bon c'est pas gagné: si on veut que nos programmes se lient à notre libc++abi (et que tout marche comme voulu), on doit forcer:
					# - soit revenir à du -cxx-isystem (ce que faisait notre quandMemeCxxISystem() pour la compil de clang, et compilo_cheminLibcxxClang() pour les autres):
					#     -cxx-isystem $INSTALLS/include/c++/v1 -cxx-isystem $INSTALLS/include -cxx-isystem /usr/include -L$INSTALLS/lib
					#   Cf. libcxx/docs/UsingLibcxx.rst qui y ajoute -Wl,-rpath,$INSTALLS/lib pour que ce chemin soit inscrit dans l'exécutable comme lieu à fouiller à défaut de $LD_LIBRARY_PATH.
					# - soit l'inscrire en dur comme on peut dans notre clang++ compilé
					#   Cf. la partie biblios de stdcppPasTropEnDur().
					#   => voie choisie, attention à bien maintenir stdcppPasTropEnDur()!
							
							vblibcxx
				fi
				;;
		esac
				case "$PROJETS" in
					,*) OPTIONS_CMAKE="$OPTIONS_CMAKE -DLLVM_ENABLE_PROJECTS=`printf '%s' "$PROJETS" | cut -d , -f 2-`" ;;
				esac
			;;
		esac
		cmake \
			-DCMAKE_INSTALL_PREFIX="$dest/" \
			-DLLVM_BUILD_LLVM_DYLIB=ON \
			-DCMAKE_C_FLAGS="$CPPFLAGS $CFLAGS" \
			-DCMAKE_CXX_FLAGS="$CPPFLAGS $CXXFLAGS" \
			-DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" \
			-DCMAKE_SHARED_LINKER_FLAGS="$LDFLAGS" \
			-DCMAKE_MODULE_LINKER_FLAGS="$LDFLAGS" \
			-DCMAKE_BUILD_TYPE=$livrable \
-DCMAKE_LINKER=/usr/bin/ld \
			$OPTIONS_CMAKE \
			$racineCompil
		;;
	configure)
configure="./configure"
pge $version 3.7 && mkdir -p bouild && cd bouild && configure="../configure" || true
$configure --prefix="$dest" --enable-optimized --enable-shared $OPTIONS_CONF
	;;
esac

fi # manuel

for modif in true $modifsPostConf ; do $modif ; done

echo Compilation… >&2
while true
do
	touch $TMP/h
	make -j4 && break ||
	find . -newer $TMP/h -type f -not -path "*/CMakeFiles/Progress/*" -not -size 0 -not -name "*.check_cache" | tee /tmp/z | grep -q . ||
	{ echo "[33m# Nous vous plaçons dans un shell interactif. Tentez de rattraper le coup.[0m" >&2 && sh ; }
done
#make -j 4 || make -j 4 || make -j 4 || ( echo "# Parfois il faut relancer une seconde fois (le -j 4 s'emmêle les pédales). Pour la seconde fois, passez le if false en true." >&2 ; exit 1 ) # Quand 4 éditions de liens tournent en même temps, ça finit par péter faute de mémoire.

for modif in true $modifsPostCompil ; do $modif ; done

echo Installation… >&2
install=install/strip # Depuis je ne sais quelle version, 3 Go par binaire, ça commence à faire beaucoup. Heureusement l'install' propose un mode bien dégagé autour des oreilles.
pge $version 18 || install=install
sudo make $install
# Certains utilisateurs de llvm (ex.: rust) ont besoin d'avoir accès aux outils intermédiaires de llvm.
[ -e bin/FileCheck ] && sudo cp bin/FileCheck "$dest/bin/" || true
for modif in true $modifsPostInstall ; do $modif ; done

# Pas de compil' libc++: en versions avant cmake, le Makefile de libcxx laisse penser qu'il va s'installer comme un cochon dans /usr/lib; et en cmake (3.9.1, par exemple), elle a été compilée en même temps que clang.

# À FAIRE: si nous sommes clang, nous pouvons aussi créer un alias (lien symbolique) llvm+clang-x.y.z -> clang-x.y.z,
# car nous en sommes un surensemble et les logiciels cherchant llvm devraient pouvoir nous trouver (ex.: mesa).

sutiliser
